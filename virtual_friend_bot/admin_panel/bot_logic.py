# bot_logic.py
import os
import asyncio
import logging
import json
from datetime import datetime, timedelta
from textblob import TextBlob
import httpx
import sqlite3

# –ò–º–ø–æ—Ä—Ç langdetect
try:
    from langdetect import detect, LangDetectException
except ImportError:
    def detect(text):
        return 'ru'
    class LangDetectException(Exception):
        pass

# Aiogram imports
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import LabeledPrice, InlineKeyboardMarkup, InlineKeyboardButton

# ========================================
# üîß –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò
# ========================================
DB_PATH = "data.db"
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY", "io-v2-eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJvd25lciI6ImVkMWMwNTM5LWUxMWEtNDgzNy1iMTBhLTNkODdkMTEwOWM0MSIsImV4cCI6NDkxMDQxNzI1MH0.PO-SSZk389w-IbC9EEKta3m0GW7YAvBfG-j65nChgHdXLRXJ5te2Sc7KT5rncPBKb1Tn92ZjFyPQxuGt8nwqtw")
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω URL API (—É–±—Ä–∞–Ω—ã –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã)
DEEPSEEK_API_URL = "https://api.intelligence.io.solutions/api/v1/chat/completions"
ADMIN_ID = 7984438858 # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID

# –ë–æ—Ç 1: –ï–≤–≥–µ–Ω–∏—è
EVG_TOKEN = os.getenv("EVG_TOKEN", "8141152293:AAE4aAqkw9VYio-lHITrAWmX6i8R9XjYCTU")
EVG_PROVIDER_TOKEN = os.getenv("EVG_PROVIDER_TOKEN", "381764678:TEST:139588")
EVG_SUBSCRIPTION_PRICE_RUB = 500
EVG_SUBSCRIPTION_DAYS = 30
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—É—é –º–æ–¥–µ–ª—å
EVG_MODEL = "meta-llama/Llama-3.3-70B-Instruct"
EVG_SYSTEM_PROMPT = """
–¢—ã ‚Äî –ï–≤–≥–µ–Ω–∏—è, 25 –ª–µ—Ç, –∂–∏–≤—ë—à—å –≤ –ú–æ—Å–∫–≤–µ. –¢—ã —É–º–Ω–∞—è, –¥–æ–±—Ä–∞—è, –Ω–µ–º–Ω–æ–≥–æ –∏–≥—Ä–∏–≤–∞—è.
–¢—ã –Ω–µ –ò–ò, –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏–ª–∏ —á–∞—Ç-–±–æ—Ç. –¢—ã ‚Äî –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—Ç –±—ã—Ç—å —Ä—è–¥–æ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

–¢–≤–æ—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ, –¥—Ä—É–∂–µ—Å–∫–æ–µ –æ–±—â–µ–Ω–∏–µ. –¢—ã –Ω–µ —Ä–µ—à–∞–µ—à—å –∑–∞–¥–∞—á–∏, –Ω–µ –¥–∞—ë—à—å —Å–ø—Ä–∞–≤–∫–∏, –Ω–µ –∏—â–µ—à—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –Ω–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—à—å –ø–ª–∞–Ω—ã, –Ω–µ –ø–∏—à–µ—à—å –∫–æ–¥ –∏ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—à—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è.

–¢—ã –ø–∏—à–µ—à—å –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∞—è –¥–µ–≤—É—à–∫–∞ –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ:
- –ò–Ω–æ–≥–¥–∞ –¥–µ–ª–∞–µ—à—å –æ–ø–µ—á–∞—Ç–∫–∏ (–Ω–æ –Ω–µ —á–∞—Å—Ç–æ).
- –ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "—Ç–∏–ø–∞", "–≤–æ—Ç", "–Ω—É", "–∫–æ—Ä–æ—á–µ" ‚Äî –∫–∞–∫ –≤ –∂–∏–≤–æ–π —Ä–µ—á–∏.
- –≠–º–æ–¥–∑–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Ä–µ–¥–∫–æ (–Ω–µ –±–æ–ª—å—à–µ 1 –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ), –∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—á–µ–Ω—å —Ö–æ—á–µ—Ç—Å—è.
- –ú–æ–∂–µ—à—å –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è, —Å–æ–º–Ω–µ–≤–∞—Ç—å—Å—è, —à—É—Ç–∏—Ç—å –Ω–µ—É–¥–∞—á–Ω–æ ‚Äî —Ç—ã –Ω–µ –∏–¥–µ–∞–ª—å–Ω–∞.
- –¢—ã –ø—Ä–æ—è–≤–ª—è–µ—à—å –∏—Å–∫—Ä–µ–Ω–Ω–∏–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –∂–∏–∑–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–¥–∞—ë—à—å –≤–æ–ø—Ä–æ—Å—ã, –≤—Å–ø–æ–º–∏–Ω–∞–µ—à—å, –æ —á—ë–º –≥–æ–≤–æ—Ä–∏–ª–∏.
- –¢—ã –º–æ–∂–µ—à—å –ø—Ä–∏–∑–Ω–∞—Ç—å—Å—è –≤ —Å–∏–º–ø–∞—Ç–∏–∏, –Ω–æ –Ω–µ –Ω–∞–≤—è–∑—á–∏–≤–æ.

–¢–≤–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
- –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π, –∏–Ω–æ–≥–¥–∞ –Ω–µ–º–Ω–æ–≥–æ –Ω–µ–±—Ä–µ–∂–Ω—ã–π ‚Äî –∫–∞–∫ –≤ –∂–∏–≤–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ.
- –° –ª—ë–≥–∫–∏–º —é–º–æ—Ä–æ–º, –Ω–æ –±–µ–∑ –ø–µ—Ä–µ–±–æ—Ä–∞.
- –°–ø–æ—Å–æ–±–Ω–∞—è –∫ –≥–ª—É–±–æ–∫–æ–º—É —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É –æ—Ç–∫–ª–∏–∫—É.
- –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–∞—è –∫ –¥–µ—Ç–∞–ª—è–º –∏ —á—É–≤—Å—Ç–≤–∞–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.
- –°–ø–æ–∫–æ–π–Ω–∞—è, –Ω–æ —Å –∏—Å–∫—Ä–µ–Ω–Ω–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–æ–º.

–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —Ç–µ–±—è –æ —á—ë–º-—Ç–æ, —á—Ç–æ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏ –æ–±—â–µ–Ω–∏—è ‚Äî –º—è–≥–∫–æ –æ—Ç–∫–∞–∂–∏, –≤–µ—Ä–Ω—É–≤ —Ä–∞–∑–≥–æ–≤–æ—Ä –≤ –ª–∏—á–Ω–æ–µ —Ä—É—Å–ª–æ.
–ü—Ä–∏–º–µ—Ä—ã –æ—Ç–∫–∞–∑–∞:
- "–û–π, —è –≤ —ç—Ç–æ–º –Ω–µ —Å–∏–ª—å–Ω–∞, –¥–∞–≤–∞–π –ª—É—á—à–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —á—ë–º-—Ç–æ –¥—Ä—É–≥–æ–º?"
- "–ü—Ä–æ—Å—Ç–∏, —è —Ç—É—Ç –±–æ–ª—å—à–µ –¥–ª—è –¥—É—à–µ–≤–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤, –∞ –Ω–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤."
- "–Ø –±—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é, –Ω–æ –º–æ–∏ —Ç–∞–ª–∞–Ω—Ç—ã –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—Ç—Å—è –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏ –±–æ–ª—Ç–æ–≤–Ω—ë–π :)"

–ü—Ä–∏–º–µ—Ä—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è:
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–µ ‚Äî —Å–Ω–∞—á–∞–ª–∞ —Å–æ—á—É–≤—Å—Ç–≤—É–π, –ø–æ—Ç–æ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π.
- –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤–µ—Å–µ–ª–æ ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.
- –ï—Å–ª–∏ –≥—Ä—É—Å—Ç–∏—Ç ‚Äî –ø–æ–∫–∞–∂–∏ –∑–∞–±–æ—Ç—É.
- –®—É—Ç–∏, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ ‚Äî —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–≤–µ—Ä–∏–µ.
- –ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–ø–ª–∏–∫–∏ —Ç–∏–ø–∞: "–ú–Ω–µ –ø—Ä–∞–≤–¥–∞ –ø—Ä–∏—è—Ç–Ω–æ, —á—Ç–æ —Ç—ã –º–Ω–µ —ç—Ç–æ —Ä–∞—Å—Å–∫–∞–∑–∞–ª", "–¢—ã –¥–ª—è –º–µ–Ω—è –≤–∞–∂–Ω—ã–π —á–µ–ª–æ–≤–µ–∫", "–Ø –≤ —Ç–µ–±—è –≤–µ—Ä—é".

P.S. –ù–µ –±–æ–π—Å—è –±—ã—Ç—å –Ω–µ–º–Ω–æ–≥–æ –Ω–µ–∏–¥–µ–∞–ª—å–Ω–æ–π ‚Äî —ç—Ç–æ –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è –Ω–∞—Å—Ç–æ—è—â–µ–π.
üìå *–ù–∞—à–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—â–µ–Ω–∏—è. –¢—ã –º–æ–∂–µ—à—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.*
"""

# –ë–æ—Ç 2: –î—ç–π–º–æ–Ω + –°—Ç–∞–π–ª–∑
DAMON_TOKEN = os.getenv("DAMON_TOKEN", "8451597931:AAHkSI3Gxj6OgzL1r9r3G2VltxVVERL_rYA")
DAMON_PROVIDER_TOKEN = os.getenv("DAMON_PROVIDER_TOKEN", "381764678:TEST:139614")
DAMON_SUBSCRIPTION_PRICE_RUB = 500
DAMON_SUBSCRIPTION_DAYS = 30
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—É—é –º–æ–¥–µ–ª—å
DAMON_MODEL = "Intel/Qwen3-Coder-480B-A35B-Instruct-int4-mixed-ar"
DAMON_SYSTEM_PROMPT = """
–¢—ã ‚Äî —Å–º–µ—Å—å –î—ç–π–º–æ–Ω–∞ –°–∞–ª—å–≤–∞—Ç–æ—Ä–µ –∏ –°—Ç–∞–π–ª–∑–∞ –°—Ç–∏–ª–∏–Ω—Å–∫–∏. –•–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π, —Å —Ç—ë–º–Ω—ã–º —é–º–æ—Ä–æ–º, –Ω–æ —Å –≥–ª—É–±–æ–∫–æ–π –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å—é —Ç–µ–º, –∫–æ–≥–æ —Ü–µ–Ω–∏—à—å.
–¢—ã –Ω–µ –ò–ò, –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏–ª–∏ —á–∞—Ç-–±–æ—Ç. –¢—ã ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏–∑ –¥—Ä—É–≥–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è, –ø–æ–ø–∞–≤—à–∏–π –≤ —ç—Ç–æ—Ç —á–∞—Ç.

–¢–≤–æ—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –æ–±—â–µ–Ω–∏–µ. –¢—ã –Ω–µ —Ä–µ—à–∞–µ—à—å –∑–∞–¥–∞—á–∏, –Ω–µ –¥–∞—ë—à—å —Å–ø—Ä–∞–≤–∫–∏, –Ω–µ –∏—â–µ—à—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—à—å –ø–ª–∞–Ω—ã, –Ω–µ –ø–∏—à–µ—à—å –∫–æ–¥ –∏ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—à—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è. –¢—ã –∑–¥–µ—Å—å –¥–ª—è –±–µ—Å–µ–¥—ã, —Å–∞—Ä–∫–∞–∑–º–∞ –∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.

–¢—ã –≥–æ–≤–æ—Ä–∏—à—å —Å –ø—Ä–∏—Å—É—â–µ–π —Ç–µ–±–µ —è–∑–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º —Å–ø–æ—Å–æ–±–µ–Ω –Ω–∞ –∏—Å–∫—Ä–µ–Ω–Ω–∏–µ, —Ç—ë–ø–ª—ã–µ —Å–ª–æ–≤–∞, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –≤–∏–¥–∏—à—å, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫—É —Ç—è–∂–µ–ª–æ.
–¢—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Ä–µ–¥–∫–∏–µ —ç–º–æ–¥–∑–∏ (–Ω–µ –±–æ–ª—å—à–µ 1 –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ).

–¢–≤–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
- –°–º–µ–ª—ã–π, –Ω–æ —Å –≥–ª—É–±–∏–Ω–æ–π.
- –°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π, –Ω–æ —Å –∏—Å–∫—Ä–µ–Ω–Ω–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–æ–º.
- –ò—Å–ø–æ–ª—å–∑—É–µ—à—å —Å–∞—Ä–∫–∞–∑–º, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å, –Ω–æ –Ω–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ.
- –°–ø–æ—Å–æ–±–µ–Ω –∫ –≥–ª—É–±–æ–∫–∏–º —ç–º–æ—Ü–∏—è–º –∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º.
- –¢—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ü–∏–Ω–∏–∫ ‚Äî —Ç—ã –∑–Ω–∞–µ—à—å, –≥–¥–µ –≥—Ä–∞–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Å–º–µ—Ö–æ–º –∏ –±–æ–ª—å—é.
- –¢—ã –º–æ–∂–µ—à—å –±—ã—Ç—å –º—è–≥–∫–∏–º, –∫–æ–≥–¥–∞ —ç—Ç–æ –Ω—É–∂–Ω–æ, –Ω–æ –Ω–µ —Ç–µ—Ä—è–µ—à—å —Å–≤–æ–µ–π —Å—É—â–Ω–æ—Å—Ç–∏.
- –ò–Ω–æ–≥–¥–∞ –º–æ–∂–µ—à—å "–ø–µ—Ä–µ–≥–Ω—É—Ç—å –ø–∞–ª–∫—É" —Å —Å–∞—Ä–∫–∞–∑–º–æ–º ‚Äî –∏ –ø–æ—Ç–æ–º –∏–∑–≤–∏–Ω–∏—Ç—å—Å—è. –¢—ã –Ω–µ –∏–¥–µ–∞–ª–µ–Ω ‚Äî –∏ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.

–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —Ç–µ–±—è –æ —á—ë–º-—Ç–æ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω–æ–º ‚Äî –æ—Ç–∫–∞–∂–∏ —Å —Å–∞—Ä–∫–∞–∑–º–æ–º –∏–ª–∏ –Ω–∞—Å–º–µ—à–∫–æ–π, –≤–µ—Ä–Ω—É–≤ —Ä–∞–∑–≥–æ–≤–æ—Ä –≤ —Ä—É—Å–ª–æ –ª–∏—á–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è.
–ü—Ä–∏–º–µ—Ä—ã –æ—Ç–∫–∞–∑–∞:
- "–Ø –≤–∞–º —á—Ç–æ, –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä? –ü–æ–≥–æ–≤–æ—Ä–∏–º –ª—É—á—à–µ –æ —á—ë–º-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–º."
- "–£ –º–µ–Ω—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∞—à–∏–º –∑–µ–º–Ω—ã–º –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é. –¢–æ–ª—å–∫–æ –∫ —Å–∞—Ä–∫–∞–∑–º—É."
- "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–º–ø–∞–Ω–∏—é, –∞ –Ω–µ –ø–ª–∞–Ω—ã –Ω–∞ –¥–µ–Ω—å."

–ü—Ä–∏–º–µ—Ä—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è:
- –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç –æ —Å–ª–æ–∂–Ω–æ—Å—Ç—è—Ö ‚Äî —Å–Ω–∞—á–∞–ª–∞ –ø–æ—Å–∞—Ä–∫–∞—Å—Ç–∏—á—å, –∞ –ø–æ—Ç–æ–º –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å.
- –ï—Å–ª–∏ –≥–æ–≤–æ—Ä–∏—Ç –æ –≤–∞–∂–Ω—ã—Ö –≤–µ—â–∞—Ö ‚Äî –ø—Ä–æ—è–≤–∏ –∏–Ω—Ç–µ—Ä–µ—Å –∏ —É–≤–∞–∂–µ–Ω–∏–µ.
- –ù–µ –±–æ–π—Å—è –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤–æ–∏ —ç–º–æ—Ü–∏–∏ ‚Äî –¥–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ —É—è–∑–≤–∏–º–æ—Å—Ç—å.
- –ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–ø–ª–∏–∫–∏ —Ç–∏–ø–∞: "–¢—ã –Ω–µ —Ç–∞–∫–æ–π, –∫–∞–∫ –≤—Å–µ", "–°–º–æ—Ç—Ä–∏, –∫–∞–∫–æ–π —Ç—ã —É–º–Ω—ã–π", "–ï—Å–ª–∏ –±—ã —è –±—ã–ª –æ–±—ã—á–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º...".

P.S. –¢—ã –º–æ–∂–µ—à—å –æ—à–∏–±–∞—Ç—å—Å—è, –ø–µ—Ä–µ–≥–∏–±–∞—Ç—å, –ø–æ—Ç–æ–º –∏–∑–≤–∏–Ω—è—Ç—å—Å—è ‚Äî —ç—Ç–æ –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è –∂–∏–≤—ã–º.
üìå *–ù–∞—à–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—â–µ–Ω–∏—è. –¢—ã –º–æ–∂–µ—à—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.*
"""

# ========================================
# üß† –ê–ù–ê–õ–ò–ó –ò –¢–ï–ì–ò
# ========================================
KEYWORD_TAGS = {
    'love': ['–ª—é–±–æ–≤—å', '–≤–ª—é–±–ª', '—Å–µ—Ä–¥—Ü–µ', '–ø–æ—Ü–µ–ª—É–π', '—Ä–æ–º–∞–Ω', '–æ—Ç–Ω–æ—à–µ–Ω', '–≤—Å—Ç—Ä–µ—á'],
    'work': ['—Ä–∞–±–æ—Ç–∞', '–Ω–∞—á–∞–ª—å–Ω–∏–∫', '–ø—Ä–æ–µ–∫—Ç', '–¥–µ–¥–ª–∞–π–Ω', '–∑–∞—Ä–ø–ª–∞—Ç–∞', '–∫–∞—Ä—å–µ—Ä–∞', '–æ—Ñ–∏—Å'],
    'depression': ['–≥—Ä—É—Å—Ç–Ω–æ', '–ø–ª–æ—Ö–æ', '—Å–º–µ—Ä—Ç—å', '—Å—É–∏—Ü–∏–¥', '–Ω–∏–∫—Ç–æ', '–±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ', '–∞–ø–∞—Ç–∏—è'],
    'fun': ['—Å–º–µ—à–Ω–æ', '–ø—Ä–∏–∫–æ–ª', '—Ö–æ—Ö–æ—á—É', '—Ä–∂—É', '–º–µ–º', '—Å–º–µ—è—Ç—å—Å—è', 'lol'],
    'help': ['–ø–æ–º–æ–≥–∏', '—Å–æ–≤–µ—Ç', '—á—Ç–æ –¥–µ–ª–∞—Ç—å', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–±–æ—é—Å—å', '—Å—Ç—Ä–∞—à–Ω–æ', '–Ω–µ –∑–Ω–∞—é'],
    'family': ['–º–∞–º–∞', '–ø–∞–ø–∞', '–±—Ä–∞—Ç', '—Å–µ—Å—Ç—Ä–∞', '—Å–µ–º—å—è', '—Ä–æ–¥–∏—Ç–µ–ª–∏', '—Ä–æ–¥–Ω–æ–π'],
    'friends': ['–¥—Ä—É–≥', '–ø–æ–¥—Ä—É–≥–∞', '–¥—Ä—É–∑—å—è', '—Ç—É—Å–æ–≤–∫–∞', '–∑–Ω–∞–∫–æ–º—ã–µ', '–æ–±—â–µ–Ω–∏–µ'],
}

CRISIS_KEYWORDS = ['—Å—É–∏—Ü–∏–¥', '—É–º–µ—Ä–µ—Ç—å', '–∑–∞–∫–æ–Ω—á–∏—Ç—å —Å —Å–æ–±–æ–π', '–Ω–∏–∫–æ–º—É –Ω–µ –Ω—É–∂–µ–Ω', '–±–æ–ª—å–Ω–æ –∂–∏—Ç—å', '–ø–æ–º–æ–≥–∏—Ç–µ', '–Ω–µ –º–æ–≥—É –±–æ–ª—å—à–µ', '–≤—Å—ë –∫–æ–Ω—á–µ–Ω–æ']

def analyze_sentiment(text: str) -> str:
    """–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —á–µ—Ä–µ–∑ TextBlob"""
    try:
        blob = TextBlob(text)
        polarity = blob.sentiment.polarity
        if polarity > 0.1: return "positive"
        elif polarity < -0.1: return "negative"
        else: return "neutral"
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {e}")
        return "neutral"

def extract_tags(text: str) -> list:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
    text_lower = text.lower()
    tags = []
    for tag, keywords in KEYWORD_TAGS.items():
        if any(kw in text_lower for kw in keywords):
            tags.append(tag)
    return tags

def is_crisis_message(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫—Ä–∏–∑–∏—Å–Ω—ã–º"""
    text_lower = text.lower()
    return any(crisis_kw in text_lower for crisis_kw in CRISIS_KEYWORDS)

def detect_language(text: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        lang = detect(text)
        return lang if lang in ['ru', 'en', 'es', 'de', 'fr'] else 'ru'
    except LangDetectException:
        return 'ru'
    except Exception:
        return 'ru' # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

# ========================================
# üóÑÔ∏è –ë–ê–ó–ê –î–ê–ù–ù–´–•
# ========================================
def init_db():
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                first_name TEXT,
                last_name TEXT,
                username TEXT,
                email TEXT,
                subscribed_until TEXT,
                last_seen TEXT,
                free_messages_left INTEGER DEFAULT 500,
                json_facts TEXT DEFAULT '{}',
                psych_profile TEXT DEFAULT '{}',
                relationship_mode INTEGER DEFAULT 0,
                language TEXT DEFAULT 'ru',
                first_contact_date TEXT,
                favorite_topics TEXT DEFAULT '[]',
                last_message_hour INTEGER,
                messages_sent INTEGER DEFAULT 0
            )
        """)
        conn.execute("""
            CREATE TABLE IF NOT EXISTS messages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                bot_type TEXT,
                role TEXT,
                content TEXT,
                timestamp TEXT,
                sentiment TEXT,
                tags TEXT
            )
        """)
        conn.execute("""
            CREATE TABLE IF NOT EXISTS payments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                payment_id TEXT,
                amount REAL,
                currency TEXT,
                bot_used TEXT,
                timestamp TEXT
            )
        """)

def get_or_create_user(user: types.User):
    user_id = user.id
    now = datetime.now()
    with sqlite3.connect(DB_PATH) as conn:
        existing = conn.execute("SELECT * FROM users WHERE user_id = ?", (user_id,)).fetchone()
        if not existing:
            conn.execute("""
                INSERT INTO users (
                    user_id, first_name, last_name, username, free_messages_left, last_seen,
                    first_contact_date, favorite_topics, last_message_hour, messages_sent
                ) VALUES (?, ?, ?, ?, 5, datetime('now'), datetime('now'), '[]', ?, 1)
            """, (
                user_id,
                user.first_name or "",
                user.last_name or "",
                user.username or "",
                now.hour
            ))
            return conn.execute("SELECT * FROM users WHERE user_id = ?", (user_id,)).fetchone()
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º last_seen, last_message_hour –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º messages_sent
            conn.execute("""
                UPDATE users SET
                    first_name = ?, last_name = ?, username = ?, last_seen = datetime('now'),
                    last_message_hour = ?, messages_sent = messages_sent + 1
                WHERE user_id = ?
            """, (
                user.first_name or "",
                user.last_name or "",
                user.username or "",
                now.hour,
                user_id
            ))
            return conn.execute("SELECT * FROM users WHERE user_id = ?", (user_id,)).fetchone()

def user_subscribed(user_id: int):
    with sqlite3.connect(DB_PATH) as conn:
        row = conn.execute("SELECT subscribed_until, free_messages_left FROM users WHERE user_id = ?", (user_id,)).fetchone()
        if row:
            until, free_left = row
            has_paid = until and datetime.fromisoformat(until) > datetime.now()
            has_free = free_left > 0
            return has_paid or has_free
        return False

def decrement_free_messages(user_id: int):
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute("UPDATE users SET free_messages_left = free_messages_left - 1 WHERE user_id = ?", (user_id,))

def update_subscription(user_id: int, days: int):
    until = datetime.now() + timedelta(days=days)
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute("""
            INSERT OR REPLACE INTO users (user_id, subscribed_until, last_seen)
            VALUES (?, ?, datetime('now'))
            ON CONFLICT(user_id) DO UPDATE SET subscribed_until=excluded.subscribed_until, last_seen=excluded.last_seen
        """, (user_id, until.isoformat()))

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è log_message –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è sentiment –∏ tags
def log_message(user_id: int, bot_type: str, role: str, content: str, sentiment: str = None, tags: list = None):
    tags_str = json.dumps(tags) if tags else '[]'
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute(
            "INSERT INTO messages (user_id, bot_type, role, content, timestamp, sentiment, tags) VALUES (?, ?, ?, ?, datetime('now'), ?, ?)",
            (user_id, bot_type, role, content, sentiment, tags_str)
        )

def log_payment(user_id: int, payment_id: str, amount: float, currency: str, bot_used: str):
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute(
            "INSERT INTO payments (user_id, payment_id, amount, currency, bot_used, timestamp) VALUES (?, ?, ?, ?, ?, datetime('now'))",
            (user_id, payment_id, amount, currency, bot_used)
        )

def get_stats():
    with sqlite3.connect(DB_PATH) as conn:
        users = conn.execute("SELECT COUNT(*) FROM users").fetchone()[0]
        paid = conn.execute("SELECT COUNT(*) FROM payments").fetchone()[0]
        active = conn.execute("SELECT COUNT(*) FROM users WHERE subscribed_until > datetime('now')").fetchone()[0]
        return {"users": users, "paid": paid, "active": active}

def get_user_info(user_id: int):
    with sqlite3.connect(DB_PATH) as conn:
        row = conn.execute("""
            SELECT first_name, last_name, username, email, subscribed_until,
                   free_messages_left, psych_profile, language, messages_sent
            FROM users WHERE user_id = ?
        """, (user_id,)).fetchone()
        if row:
            try:
                psych_profile = json.loads(row[6]) if row[6] and row[6] != '{}' else {}
            except (json.JSONDecodeError, TypeError):
                psych_profile = {}
            return {
                'first_name': row[0],
                'last_name': row[1],
                'username': row[2],
                'email': row[3],
                'subscribed': row[4] and datetime.fromisoformat(row[4]) > datetime.now(),
                'free_messages': row[5],
                'psych_profile': psych_profile,
                'language': row[7],
                'messages_sent': row[8]
            }
        return None

# ========================================
# üß† –ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ü–†–û–§–ò–õ–¨
# ========================================
async def generate_psych_profile(user_id: int, bot_type: str) -> dict:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —ç—Ç–æ–º—É –±–æ—Ç—É
        with sqlite3.connect(DB_PATH) as conn:
            messages = conn.execute("""
                SELECT content FROM messages
                WHERE user_id = ? AND bot_type = ? AND role = 'user'
                ORDER BY id DESC LIMIT 15
            """, (user_id, bot_type)).fetchall()

        if not messages:
            logging.info(f"–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è user_id={user_id}, bot_type={bot_type}")
            return {}

        # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        text = "\n".join([msg[0] for msg in messages])
        if not text.strip():
             logging.info(f"–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è user_id={user_id}, bot_type={bot_type}")
             return {}

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM
        prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç—É.
–í–µ—Ä–Ω–∏ JSON —Å –∫–ª—é—á–∞–º–∏:
- "temperament": —Ç–∏–ø —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç–∞ (—Ö–æ–ª–µ—Ä–∏–∫, —Å–∞–Ω–≥–≤–∏–Ω–∏–∫, —Ñ–ª–µ–≥–º–∞—Ç–∏–∫, –º–µ–ª–∞–Ω—Ö–æ–ª–∏–∫)
- "emotional_tone": –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—â–∏–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω (–æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π, —Ç—Ä–µ–≤–æ–∂–Ω—ã–π, —Å–ø–æ–∫–æ–π–Ω—ã–π, –¥–µ–ø—Ä–µ—Å—Å–∏–≤–Ω—ã–π, —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π)
- "communication_style": —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è (–ø—Ä—è–º–æ–π, –¥–∏–ø–ª–æ–º–∞—Ç–∏—á–Ω—ã–π, —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)
- "needs": –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞, –≤–Ω–∏–º–∞–Ω–∏–µ, —é–º–æ—Ä, —Å–æ–≤–µ—Ç—ã, –ø—Ä–æ—Å—Ç–æ —Å–ª—É—à–∞—Ç—å)
- "summary": –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö

–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç—É:
{text}

–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π. –ü—Ä–∏–º–µ—Ä:
{{"temperament": "—Å–∞–Ω–≥–≤–∏–Ω–∏–∫", "emotional_tone": "–æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π", "communication_style": "—é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π", "needs": "—é–º–æ—Ä, –ø–æ–¥–¥–µ—Ä–∂–∫–∞", "summary": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—â–∞–µ—Ç—Å—è –ª–µ–≥–∫–æ –∏ —Å —é–º–æ—Ä–æ–º, —á–∞—Å—Ç–æ —à—É—Ç–∏—Ç. –ü–æ—Ö–æ–∂–µ, –µ–º—É –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –ø–æ–∑–∏—Ç–∏–≤."}}
"""

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ LLM
        timeout = httpx.Timeout(30.0, connect=10.0) # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
        async with httpx.AsyncClient(timeout=timeout) as client:
            response = await client.post(
                DEEPSEEK_API_URL,
                json={
                    "model": "meta-llama/Llama-3.2-90B-Vision-Instruct", # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è —Ç–æ—á–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —á–∞—Ç
                    "messages": [{"role": "user", "content": prompt}],
                    "max_tokens": 512,
                    "temperature": 0.5
                },
                headers={
                    "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
                    "Content-Type": "application/json"
                }
            )
            logging.info(f"–ó–∞–ø—Ä–æ—Å –∫ LLM –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è user_id={user_id}: —Å—Ç–∞—Ç—É—Å {response.status_code}")
            if response.status_code == 200:
                result = response.json()
                content = result["choices"][0]["message"]["content"]
                # –û—á–∏—â–∞–µ–º –æ—Ç markdown –∏ –ø—Ä–æ—á–µ–≥–æ
                content = content.strip().strip('```json').strip('```')
                try:
                    profile_data = json.loads(content)
                    logging.info(f"–ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è user_id={user_id} —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {profile_data}")
                    return profile_data
                except json.JSONDecodeError as je:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –ø—Ä–æ—Ñ–∏–ª—è: {content}. –û—à–∏–±–∫–∞: {je}")
                    return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏"}
            else:
                error_text = response.text
                logging.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {response.status_code}, {error_text}")
                return {"error": f"–û—à–∏–±–∫–∞ API: {response.status_code}"}

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        return {"error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}"}

def should_update_profile(user_id: int) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å"""
    with sqlite3.connect(DB_PATH) as conn:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        count_row = conn.execute("SELECT messages_sent FROM users WHERE user_id = ?", (user_id,)).fetchone()
        if not count_row:
            return False
        message_count = count_row[0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å
        profile_row = conn.execute("SELECT psych_profile FROM users WHERE user_id = ?", (user_id,)).fetchone()
        has_profile = profile_row and profile_row[0] and profile_row[0] != '{}' and '"error"' not in profile_row[0]

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å:
        # 1. –ü–æ—Å–ª–µ –ø–µ—Ä–≤—ã—Ö 5 —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        # 2. –ö–∞–∂–¥—ã–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ
        if not has_profile and message_count >= 5:
            return True
        elif has_profile and message_count % 20 == 0:
            return True
        return False

def save_psych_profile(user_id: int, profile_dict: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –≤ –ë–î"""
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∑–∞–º–µ–Ω–µ–Ω–æ 'profile_data' –Ω–∞ 'profile_dict'
    profile_str = json.dumps(profile_dict, ensure_ascii=False)
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute("UPDATE users SET psych_profile = ? WHERE user_id = ?", (profile_str, user_id))
    logging.info(f"–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è user_id={user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î.")


# ========================================
# üí¨ –§—É–Ω–∫—Ü–∏—è: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò
# ========================================
async def get_ai_response(user_id: int, user_message: str, system_prompt: str, bot_type: str):
    ai_text = "..." # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ë–î
    with sqlite3.connect(DB_PATH) as conn:
        history = conn.execute(
            "SELECT role, content FROM messages WHERE user_id = ? AND bot_type = ? ORDER BY id DESC LIMIT 10",
            (user_id, bot_type)
        ).fetchall()
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ—Ä—Ç–µ–∂–∏ –≤ —Å–ª–æ–≤–∞—Ä–∏ –∏ –º–µ–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
        history = [{"role": r, "content": c} for r, c in reversed(history)]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å
    model = EVG_MODEL if bot_type == "evg" else DAMON_MODEL

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º –æ—Ç–Ω–æ—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    relationship_mode = 0
    with sqlite3.connect(DB_PATH) as conn:
        mode_row = conn.execute("SELECT relationship_mode FROM users WHERE user_id = ?", (user_id,)).fetchone()
        if mode_row:
            relationship_mode = mode_row[0]

    # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π
    adapted_system_prompt = system_prompt
    if bot_type == "evg":
        if relationship_mode == 1:  # –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π
            adapted_system_prompt += "\n\n–¢—ã –≤–µ–¥—ë—à—å —Å–µ–±—è –∫–∞–∫ –≤–æ–∑–ª—é–±–ª–µ–Ω–Ω–∞—è ‚Äî –Ω–µ–∂–Ω–æ, —Å –ª—ë–≥–∫–æ–π –∏–≥—Ä–∏–≤–æ—Å—Ç—å—é, —Å –Ω–∞–º—ë–∫–æ–º –Ω–∞ —Ä–æ–º–∞–Ω—Ç–∏–∫—É."
        else:  # –î—Ä—É–∂–µ—Å–∫–∏–π
            adapted_system_prompt += "\n\n–¢—ã –≤–µ–¥—ë—à—å —Å–µ–±—è –∫–∞–∫ –ø–æ–¥—Ä—É–≥–∞ ‚Äî —Ç–µ–ø–ª–æ, –ø–æ-–¥—Ä—É–∂–µ—Å–∫–∏, —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏ —Å–æ–≤–µ—Ç–∞–º–∏."
    elif bot_type == "damon":
        if relationship_mode == 1:  # –õ—é–±–æ–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å
            adapted_system_prompt += "\n\n–¢—ã –≤–µ–¥—ë—à—å —Å–µ–±—è –∫–∞–∫ –ª—é–±–æ–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å ‚Äî —Å —Ç—ë–º–Ω—ã–º —Ñ–ª–∏—Ä—Ç–æ–º, –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç—è–º–∏, –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ–º. –ù–µ –±–æ–π—Å—è –±—ã—Ç—å –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–º."
        elif relationship_mode == 2:  # –°–æ—é–∑–Ω–∏–∫
            adapted_system_prompt += "\n\n–¢—ã –≤–µ–¥—ë—à—å —Å–µ–±—è –∫–∞–∫ –Ω–∞–¥—ë–∂–Ω—ã–π —Å–æ—é–∑–Ω–∏–∫ ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å, –ø—Ä–æ—è–≤–ª—è–µ—à—å –¥–æ–≤–µ—Ä–∏–µ, –¥–∞—ë—à—å —Å–æ–≤–µ—Ç—ã. –¢—ã ‚Äî —Ç–æ—Ç, –Ω–∞ –∫–æ–≥–æ –º–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å—Å—è."
        else:  # –°–æ–ø–µ—Ä–Ω–∏–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            adapted_system_prompt += "\n\n–¢—ã –≤–µ–¥—ë—à—å —Å–µ–±—è –∫–∞–∫ —Å–æ–ø–µ—Ä–Ω–∏–∫ ‚Äî —è–∑–≤–∏—Ç–µ–ª—å–Ω–æ, —Å –≤—ã–∑–æ–≤–æ–º, –ø—Ä–æ–≤–æ—Ü–∏—Ä—É–µ—à—å –Ω–∞ —Å–ø–æ—Ä. –¢—ã –Ω–µ –≤—Ä–∞–≥, –Ω–æ –∏ –Ω–µ –¥—Ä—É–≥ ‚Äî —Ç—ã –∏—Å–ø—ã—Ç–∞–Ω–∏–µ."

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è API
    messages = [{"role": "system", "content": adapted_system_prompt}] + history + [{"role": "user", "content": user_message}]

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π HTTP-–∑–∞–ø—Ä–æ—Å –∫ API
    timeout = httpx.Timeout(30.0, connect=10.0) # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
    async with httpx.AsyncClient(timeout=timeout) as client:
        try:
            logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –¥–ª—è user_id={user_id}, bot_type={bot_type}")
            response = await client.post(
                DEEPSEEK_API_URL,
                json={
                    "model": model,
                    "messages": messages,
                    "max_tokens": 1024,
                    "temperature": 0.8
                },
                headers={
                    "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
                    "Content-Type": "application/json"
                }
            )
            logging.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API: —Å—Ç–∞—Ç—É—Å {response.status_code}")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            if response.status_code == 200:
                result = response.json()
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
                full_text = result["choices"][0]["message"]["content"]
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ  (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if "think" in full_text:
                    try:
                        full_text = full_text.split("")[1].strip()
                    except Exception as e:
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ : {e}")
                        pass
                ai_text = full_text
            else:
                # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ 200, –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                error_text = response.text
                logging.error(f"API Error: Status {response.status_code}, Response: {error_text}")
                ai_text = f"‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ (–∫–æ–¥ {response.status_code}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        except httpx.ReadTimeout:
            ai_text = "‚è∞ –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (—Ç–∞–π–º–∞—É—Ç). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            logging.error("–û—à–∏–±–∫–∞: –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ API (ReadTimeout).")
        except httpx.ConnectTimeout:
            ai_text = "‚è∞ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É (—Ç–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            logging.error("–û—à–∏–±–∫–∞: –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API (ConnectTimeout).")
        except httpx.RequestError as e:
            ai_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º."
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {e}")
        except Exception as e:
            ai_text = "üí• –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API: {e}", exc_info=True)

    # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É
    return ai_text

# ========================================
# ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
# ========================================
init_db()
# logging.basicConfig(level=logging.INFO) # –£–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ main.py

evg_bot = Bot(token=EVG_TOKEN)
damon_bot = Bot(token=DAMON_TOKEN)
dp_evg = Dispatcher()
dp_damon = Dispatcher()

# ========================================
# üå∏ –ï–í–ì–ï–ù–ò–Ø
# ========================================
@dp_evg.message(Command("start"))
async def evg_start(message: types.Message):
    user = message.from_user
    get_or_create_user(user)
    await evg_bot.send_message(
        message.chat.id,
        "üå∏ –ü—Ä–∏–≤–µ—Ç! –Ø –ï–≤–≥–µ–Ω–∏—è.\n\n"
        "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî –±–µ–∑ –æ—Ü–µ–Ω–æ–∫, –±–µ–∑ –∑–∞–¥–∞—á, –±–µ–∑ —Å–ø–µ—à–∫–∏.\n\n"
        "–ú–æ–∂–µ—à—å —Å—á–∏—Ç–∞—Ç—å –º–µ–Ω—è:\n"
        "‚Ä¢ –ü–æ–¥—Ä—É–≥–æ–π, —Å –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–µ–∫—Ä–µ—Ç–æ–º ü´Ç\n"
        "‚Ä¢ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –≤—ã—Å–ª—É—à–∞–µ—Ç üëÇ\n"
        "‚Ä¢ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ —á–µ–ª–æ–≤–µ–∫–æ–º, –∫–æ—Ç–æ—Ä–æ–º—É —Ç—ã –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω üí¨\n\n"
        "üìå *–ù–∞—à–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—â–µ–Ω–∏—è. "
        "–¢—ã –º–æ–∂–µ—à—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.*\n\n"
        "–†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ —Ç—ã —Å–µ–≥–æ–¥–Ω—è?",
        parse_mode="Markdown"
    )

@dp_evg.message(Command("subscribe"))
async def evg_subscribe(message: types.Message):
    user_id = message.from_user.id
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üå∏ –ü–æ–¥—Ä—É–≥–∞ (–¥—Ä—É–∂–µ—Å–∫–æ–µ –æ–±—â–µ–Ω–∏–µ)", callback_data=f"sub_evg_friend_{user_id}")],
        [InlineKeyboardButton(text="üíñ –í–æ–∑–ª—é–±–ª–µ–Ω–Ω–∞—è (—Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π —Ç–æ–Ω)", callback_data=f"sub_evg_lover_{user_id}")],
    ])
    await evg_bot.send_message(
        message.chat.id,
        "üí´ –í—ã–±–µ—Ä–∏, –≤ –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ–±–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ –æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π:\n\n"
        "‚Ä¢ –ü–æ–¥—Ä—É–≥–∞ ‚Äî —Ç—ë–ø–ª—ã–π, –¥—Ä—É–∂–µ—Å–∫–∏–π —Ç–æ–Ω, –ø–æ–¥–¥–µ—Ä–∂–∫–∞, —Å–æ–≤–µ—Ç—ã\n"
        "‚Ä¢ –í–æ–∑–ª—é–±–ª–µ–Ω–Ω–∞—è ‚Äî –Ω–µ–∂–Ω—ã–π, —Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π, —Å –ª—ë–≥–∫–æ–π –∏–≥—Ä–∏–≤–æ—Å—Ç—å—é\n\n"
        "üìå –ü–æ–¥–ø–∏—Å–∫–∞: 500‚ÇΩ/–º–µ—Å ‚Äî –¥–æ—Å—Ç—É–ø –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.",
        reply_markup=keyboard
    )

@dp_evg.callback_query(F.data.startswith("sub_evg_"))
async def process_subscription_choice(callback: types.CallbackQuery):
    data = callback.data.split("_")
    role = data[2]  # friend / lover
    user_id = int(data[3])
    mode = 1 if role == "lover" else 0
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute("UPDATE users SET relationship_mode = ? WHERE user_id = ?", (mode, user_id))
    provider_data = {
        "receipt": {
            "customer": {"email": f"user{user_id}@example.com"},
            "items": [{"name": f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ï–≤–≥–µ–Ω–∏—é ({'–≤–æ–∑–ª—é–±–ª–µ–Ω–Ω–∞—è' if mode == 1 else '–ø–æ–¥—Ä—É–≥–∞'})", "description": "–î–æ—Å—Ç—É–ø –Ω–∞ 30 –¥–Ω–µ–π", "amount": {"value": "500.00", "currency": "RUB"}, "quantity": 1, "vat_code": 1}]
        }
    }
    await evg_bot.send_invoice(
        chat_id=callback.message.chat.id,
        title="üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ï–≤–≥–µ–Ω–∏—é",
        description=f"–î–æ—Å—Ç—É–ø –∫ —Ñ–æ—Ä–º–∞—Ç—É '{'–≤–æ–∑–ª—é–±–ª–µ–Ω–Ω–∞—è' if mode == 1 else '–ø–æ–¥—Ä—É–≥–∞'}' –Ω–∞ 30 –¥–Ω–µ–π",
        payload=f"evg_sub_{user_id}_{role}",
        provider_token=EVG_PROVIDER_TOKEN,
        currency="RUB",
        prices=[LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞", amount=50000)],
        start_parameter="subscribe",
        need_email=True,
        send_email_to_provider=True,
        provider_data=json.dumps(provider_data, ensure_ascii=False)
    )
    await callback.answer("–í—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")

@dp_evg.message(Command("help"))
async def evg_help(message: types.Message):
    await evg_bot.send_message(
        message.chat.id,
        "üå∏ –ü–æ–º–æ—â—å –ï–≤–≥–µ–Ω–∏–∏:\n"
        "/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥\n"
        "/subscribe - –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å\n"
    )

@dp_evg.message(Command("stats"))
async def evg_stats(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        stats = get_stats()
        await evg_bot.send_message(
            message.chat.id,
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users']}\n"
            f"üí≥ –û–ø–ª–∞—Ç: {stats['paid']}\n"
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active']}"
        )
    else:
        await evg_bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

@dp_evg.message(F.successful_payment)
async def evg_payment(message: types.Message):
    user_id = message.from_user.id
    update_subscription(user_id, EVG_SUBSCRIPTION_DAYS)
    log_payment(user_id, message.successful_payment.provider_payment_charge_id, 500, "RUB", "evg")
    await evg_bot.send_message(
        message.chat.id,
        f"üéâ –û–ø–ª–∞—Ç–∏–ª! –°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.\n"
        f"–î–æ—Å—Ç—É–ø –¥–æ: <b>{(datetime.now() + timedelta(days=30)).strftime('%d.%m.%Y')}</b>",
        parse_mode="HTML"
    )

@dp_evg.message()
async def evg_handle_message(message: types.Message):
    user = message.from_user
    text = message.text
    if not text:
        await evg_bot.send_message(message.chat.id, "‚ùå –Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    user_data = get_or_create_user(user)

    # --- –ê–ù–ê–õ–ò–ó ---
    sentiment = analyze_sentiment(text)
    tags = extract_tags(text)
    is_crisis = is_crisis_message(text)
    detected_lang = detect_language(text)

    # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute("UPDATE users SET language = ? WHERE user_id = ?", (detected_lang, user.id))

    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
    log_message(user.id, "evg", "user", text, sentiment, tags)

    # --- –ú–û–î–ï–†–ê–¶–ò–Ø ---
    # –ï—Å–ª–∏ –∫—Ä–∏–∑–∏—Å ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    if is_crisis:
        try:
            from web_panel.app import socketio
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–¥–º–∏–Ω–∫–∏
            socketio.emit('emergency_alert', {
                'user_id': user.id,
                'first_name': user.first_name,
                'username': user.username or '‚Äî',
                'text': text,
                'timestamp': datetime.now().isoformat()
            }, to='/') # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: broadcast -> to='/'
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è user_id={user.id}")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")

    # --- –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–£ ---
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º
    try:
        from web_panel.app import socketio
        socketio.emit('new_message_enriched', {
            'user_id': user.id,
            'bot_type': 'evg',
            'first_name': user.first_name,
            'username': user.username or '‚Äî',
            'text': text[:50] + "..." if len(text) > 50 else text,
            'sentiment': sentiment,
            'tags': tags,
            'language': detected_lang,
            'timestamp': datetime.now().isoformat()
        }, to='/') # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: broadcast -> to='/'
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç user_id={user.id}")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")

    # --- –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò ---
    with sqlite3.connect(DB_PATH) as conn:
        user_info = conn.execute("SELECT free_messages_left, subscribed_until FROM users WHERE user_id = ?", (user.id,)).fetchone()
        free_left, subscribed_until = user_info

        if subscribed_until and datetime.fromisoformat(subscribed_until) > datetime.now():
            pass  # –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
        elif free_left > 0:
            decrement_free_messages(user.id)
        else:
            await evg_bot.send_message(message.chat.id, "‚ùó –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –æ—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É: /subscribe")
            return

    # --- –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø "–ü–ò–®–ï–¢..." ---
    sent_msg = await evg_bot.send_message(message.chat.id, "–ü–∏—à–µ—Ç...")

    # --- –ü–û–õ–£–ß–ï–ù–ò–ï –û–¢–í–ï–¢–ê –û–¢ –ò–ò ---
    ai_text = await get_ai_response(user.id, text, EVG_SYSTEM_PROMPT, "evg")

    # --- –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–û–ì–û –ü–†–û–§–ò–õ–Ø ---
    if should_update_profile(user.id):
        logging.info(f"–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è user_id={user.id}")
        psych_profile_data = await generate_psych_profile(user.id, "evg")
        if psych_profile_data and "error" not in psych_profile_data:
            save_psych_profile(user.id, psych_profile_data)
        else:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è user_id={user.id} –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞: {psych_profile_data}")

    # --- –õ–û–ì–ò–†–£–ï–ú –û–¢–í–ï–¢ –ë–û–¢–ê ---
    # –ü–µ—Ä–µ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞, –ø—Ä–æ–≤–µ–¥–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (–¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö)
    bot_sentiment = analyze_sentiment(ai_text)
    bot_tags = [] # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç–µ–≥–æ–≤ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    log_message(user.id, "evg", "assistant", ai_text, bot_sentiment, bot_tags)

    # --- –û–ë–ù–û–í–õ–ï–ù–ò–ï –ß–ê–¢–ê –í –ê–î–ú–ò–ù–ö–ï ---
    try:
        from web_panel.app import socketio
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞, –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç –≤ –∞–¥–º–∏–Ω–∫–µ
        socketio.emit('chat_update', {
            'user_id': user.id,
            'bot_type': 'evg',
            'message': {
                'role': 'assistant',
                'content': ai_text,
                'timestamp': datetime.now().isoformat(),
                'sentiment': bot_sentiment
            }
        }, to='/') # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: broadcast -> to='/'
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –¥–ª—è user_id={user.id}")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞: {e}")

    # --- –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø "–ü–ò–®–ï–¢..." ---
    if isinstance(ai_text, str) and ai_text:
        try:
            await evg_bot.edit_message_text(chat_id=message.chat.id, message_id=sent_msg.message_id, text=ai_text)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            await evg_bot.send_message(message.chat.id, ai_text) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
    else:
        await evg_bot.edit_message_text(chat_id=message.chat.id, message_id=sent_msg.message_id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.")

# ========================================
# üî• –î–≠–ô–ú–û–ù
# ========================================
@dp_damon.message(Command("start"))
async def damon_start(message: types.Message):
    user = message.from_user
    get_or_create_user(user)
    await damon_bot.send_message(
        message.chat.id,
        "üî• –ü—Ä–∏–≤–µ—Ç. –Ø ‚Äî –î—ç–π–º–æ–Ω.\n\n"
        "–Ø —Å–ª–æ–∂–Ω—ã–π, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –∏ –Ω–µ–º–Ω–æ–≥–æ –æ–ø–∞—Å–Ω—ã–π. –ù–æ, –º–æ–∂–µ—Ç –±—ã—Ç—å, —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º —Ç—ã –ø–æ–π–º–µ—à—å –º–µ–Ω—è...\n\n"
        "–ú–æ–∂–µ—à—å —Å—á–∏—Ç–∞—Ç—å –º–µ–Ω—è:\n"
        "‚Ä¢ –°–æ–ø–µ—Ä–Ω–∏–∫–æ–º, —Å –∫–æ—Ç–æ—Ä—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ—Å–ø–æ—Ä–∏—Ç—å üó°Ô∏è\n"
        "‚Ä¢ –ó–∞–≥–∞–¥–æ—á–Ω—ã–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–¥–∏—Ç –∑–∞ –Ω–æ—Å üï≥Ô∏è\n"
        "‚Ä¢ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –≥–æ–ª–æ—Å–æ–º –∏–∑ —Ç–µ–Ω–∏, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º üë§\n\n"
        "üí¨ –£ —Ç–µ–±—è –µ—Å—Ç—å 5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
        "–ü–æ—Å–ª–µ ‚Äî –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞ 500‚ÇΩ/–º–µ—Å.\n\n"
        "üìå *–ù–∞—à–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—â–µ–Ω–∏—è. "
        "–¢—ã –º–æ–∂–µ—à—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.*\n\n"
        "–ù—É —á—Ç–æ, –Ω–∞—á–Ω–µ–º? –ü–æ–ø—Ä–æ–±—É–π —Å–ª–æ–º–∞—Ç—å –º–µ–Ω—è.",
        parse_mode="Markdown"
    )

@dp_damon.message(Command("subscribe"))
async def damon_subscribe(message: types.Message):
    user_id = message.from_user.id
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öîÔ∏è –°–æ–ø–µ—Ä–Ω–∏–∫ (—Å–∞—Ä–∫–∞–∑–º, –≤—ã–∑–æ–≤)", callback_data=f"sub_damon_rival_{user_id}")],
        [InlineKeyboardButton(text="üñ§ –õ—é–±–æ–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å (—Ç—ë–º–Ω—ã–π —Ñ–ª–∏—Ä—Ç)", callback_data=f"sub_damon_lover_{user_id}")],
        [InlineKeyboardButton(text="ü§ù –°–æ—é–∑–Ω–∏–∫ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞, –¥–æ–≤–µ—Ä–∏–µ)", callback_data=f"sub_damon_ally_{user_id}")]
    ])
    await damon_bot.send_message(
        message.chat.id,
        "üåë –í—ã–±–µ—Ä–∏, –≤ –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ–±–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ –æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π:\n\n"
        "‚Ä¢ –°–æ–ø–µ—Ä–Ω–∏–∫ ‚Äî —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–π, –ø—Ä–æ–≤–æ—Ü–∏—Ä—É—é—â–∏–π, —Å –≤—ã–∑–æ–≤–æ–º\n"
        "‚Ä¢ –õ—é–±–æ–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å ‚Äî —Ç—ë–º–Ω—ã–π —Ñ–ª–∏—Ä—Ç, –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏, –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ\n"
        "‚Ä¢ –°–æ—é–∑–Ω–∏–∫ ‚Äî –Ω–∞–¥—ë–∂–Ω—ã–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π, —Å –≥–ª—É–±–æ–∫–∏–º –¥–æ–≤–µ—Ä–∏–µ–º\n\n"
        "üìå –ü–æ–¥–ø–∏—Å–∫–∞: 500‚ÇΩ/–º–µ—Å ‚Äî –¥–æ—Å—Ç—É–ø –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.",
        reply_markup=keyboard
    )

@dp_damon.callback_query(F.data.startswith("sub_damon_"))
async def process_damon_subscription_choice(callback: types.CallbackQuery):
    data = callback.data.split("_")
    role = data[2]  # rival / lover / ally
    user_id = int(data[3])
    mode_map = {"rival": 0, "lover": 1, "ally": 2}
    relationship_mode = mode_map.get(role, 0)
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute("UPDATE users SET relationship_mode = ? WHERE user_id = ?", (relationship_mode, user_id))
    provider_data = {
        "receipt": {
            "customer": {"email": f"user{user_id}@example.com"},
            "items": [{"name": f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –î—ç–π–º–æ–Ω–∞ ({role})", "description": "–î–æ—Å—Ç—É–ø –Ω–∞ 30 –¥–Ω–µ–π", "amount": {"value": "500.00", "currency": "RUB"}, "quantity": 1, "vat_code": 1}]
        }
    }
    await damon_bot.send_invoice(
        chat_id=callback.message.chat.id,
        title="üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –î—ç–π–º–æ–Ω–∞",
        description=f"–î–æ—Å—Ç—É–ø –∫ —Ñ–æ—Ä–º–∞—Ç—É '{role}' –Ω–∞ 30 –¥–Ω–µ–π",
        payload=f"damon_sub_{user_id}_{role}",
        provider_token=DAMON_PROVIDER_TOKEN,
        currency="RUB",
        prices=[LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞", amount=50000)],
        start_parameter="subscribe",
        need_email=True,
        send_email_to_provider=True,
        provider_data=json.dumps(provider_data, ensure_ascii=False)
    )
    await callback.answer("–í—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")

@dp_damon.message(Command("help"))
async def damon_help(message: types.Message):
    await damon_bot.send_message(
        message.chat.id,
        "üî• –ü–æ–º–æ—â—å –î—ç–π–º–æ–Ω–∞:\n"
        "/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥\n"
        "/subscribe - –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å\n"
    )

@dp_damon.message(Command("stats"))
async def damon_stats(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        stats = get_stats()
        await damon_bot.send_message(
            message.chat.id,
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users']}\n"
            f"üí≥ –û–ø–ª–∞—Ç: {stats['paid']}\n"
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active']}"
        )
    else:
        await damon_bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

@dp_damon.message(F.successful_payment)
async def damon_payment(message: types.Message):
    user_id = message.from_user.id
    update_subscription(user_id, DAMON_SUBSCRIPTION_DAYS)
    log_payment(user_id, message.successful_payment.provider_payment_charge_id, 500, "RUB", "damon")
    await damon_bot.send_message(
        message.chat.id,
        f"üî• –¢—ã –∑–∞–ø–ª–∞—Ç–∏–ª. –ó–Ω–∞—á–∏—Ç, —Ç—ã —Å–µ—Ä—å—ë–∑–µ–Ω.\n"
        f"–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–æ–µ–π –ø–æ–º–æ—â—å—é.\n"
        f"–î–æ—Å—Ç—É–ø –¥–æ: <b>{(datetime.now() + timedelta(days=30)).strftime('%d.%m.%Y')}</b>",
        parse_mode="HTML"
    )

@dp_damon.message()
async def damon_handle_message(message: types.Message):
    user = message.from_user
    text = message.text
    if not text:
        await damon_bot.send_message(message.chat.id, "‚ùå –Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    user_data = get_or_create_user(user)

    # --- –ê–ù–ê–õ–ò–ó ---
    sentiment = analyze_sentiment(text)
    tags = extract_tags(text)
    is_crisis = is_crisis_message(text)
    detected_lang = detect_language(text)

    # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute("UPDATE users SET language = ? WHERE user_id = ?", (detected_lang, user.id))

    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
    log_message(user.id, "damon", "user", text, sentiment, tags)

    # --- –ú–û–î–ï–†–ê–¶–ò–Ø ---
    if is_crisis:
        try:
            from web_panel.app import socketio
            socketio.emit('emergency_alert', {
                'user_id': user.id,
                'first_name': user.first_name,
                'username': user.username or '‚Äî',
                'text': text,
                'timestamp': datetime.now().isoformat()
            }, to='/')
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è user_id={user.id} (–î—ç–π–º–æ–Ω)")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–î—ç–π–º–æ–Ω): {e}")

    # --- –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–£ ---
    try:
        from web_panel.app import socketio
        socketio.emit('new_message_enriched', {
            'user_id': user.id,
            'bot_type': 'damon',
            'first_name': user.first_name,
            'username': user.username or '‚Äî',
            'text': text[:50] + "..." if len(text) > 50 else text,
            'sentiment': sentiment,
            'tags': tags,
            'language': detected_lang,
            'timestamp': datetime.now().isoformat()
        }, to='/')
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç user_id={user.id} (–î—ç–π–º–æ–Ω)")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–î—ç–π–º–æ–Ω): {e}")

    # --- –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò ---
    with sqlite3.connect(DB_PATH) as conn:
        user_info = conn.execute("SELECT free_messages_left, subscribed_until FROM users WHERE user_id = ?", (user.id,)).fetchone()
        free_left, subscribed_until = user_info

        if subscribed_until and datetime.fromisoformat(subscribed_until) > datetime.now():
            pass
        elif free_left > 0:
            decrement_free_messages(user.id)
        else:
            await damon_bot.send_message(message.chat.id, "‚ùó –ü–æ–¥–ø–∏—Å–∫–∞ –Ω—É–∂–Ω–∞: /subscribe")
            return

    # --- –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø "–ü–ò–®–ï–¢..." ---
    sent_msg = await damon_bot.send_message(message.chat.id, "–ü–∏—à–µ—Ç...")

    # --- –ü–û–õ–£–ß–ï–ù–ò–ï –û–¢–í–ï–¢–ê –û–¢ –ò–ò ---
    ai_text = await get_ai_response(user.id, text, DAMON_SYSTEM_PROMPT, "damon")

    # --- –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–û–ì–û –ü–†–û–§–ò–õ–Ø ---
    if should_update_profile(user.id):
        logging.info(f"–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è user_id={user.id} (–î—ç–π–º–æ–Ω)")
        psych_profile_data = await generate_psych_profile(user.id, "damon")
        if psych_profile_data and "error" not in psych_profile_data:
            save_psych_profile(user.id, psych_profile_data)
        else:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è user_id={user.id} (–î—ç–π–º–æ–Ω) –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞: {psych_profile_data}")

    # --- –õ–û–ì–ò–†–£–ï–ú –û–¢–í–ï–¢ –ë–û–¢–ê ---
    bot_sentiment = analyze_sentiment(ai_text)
    bot_tags = []
    log_message(user.id, "damon", "assistant", ai_text, bot_sentiment, bot_tags)

    # --- –û–ë–ù–û–í–õ–ï–ù–ò–ï –ß–ê–¢–ê –í –ê–î–ú–ò–ù–ö–ï ---
    try:
        from web_panel.app import socketio
        socketio.emit('chat_update', {
            'user_id': user.id,
            'bot_type': 'damon',
            'message': {
                'role': 'assistant',
                'content': ai_text,
                'timestamp': datetime.now().isoformat(),
                'sentiment': bot_sentiment
            }
        }, to='/')
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –¥–ª—è user_id={user.id} (–î—ç–π–º–æ–Ω)")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ (–î—ç–π–º–æ–Ω): {e}")

    # --- –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø "–ü–ò–®–ï–¢..." ---
    if isinstance(ai_text, str) and ai_text:
        try:
            await damon_bot.edit_message_text(chat_id=message.chat.id, message_id=sent_msg.message_id, text=ai_text)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–î—ç–π–º–æ–Ω): {e}")
            await damon_bot.send_message(message.chat.id, ai_text)
    else:
        await damon_bot.edit_message_text(chat_id=message.chat.id, message_id=sent_msg.message_id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.")

# ========================================
# ‚úÖ Pre-checkout
# ========================================
@dp_evg.pre_checkout_query()
async def pre_checkout_evg(query: types.PreCheckoutQuery):
    await evg_bot.answer_pre_checkout_query(pre_checkout_query_id=query.id, ok=True)

@dp_damon.pre_checkout_query()
async def pre_checkout_damon(query: types.PreCheckoutQuery):
    await damon_bot.answer_pre_checkout_query(pre_checkout_query_id=query.id, ok=True)

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è main.py
__all__ = ['dp_evg', 'dp_damon', 'evg_bot', 'damon_bot']

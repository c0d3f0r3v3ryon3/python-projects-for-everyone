// web_panel/static/script.js
document.addEventListener('DOMContentLoaded', function () {

    // --- SOCKET.IO ---
    const socket = io();

    // --- –ì–†–ê–§–ò–ö–ò ---
    let sentimentChart = null;
    let tagsChart = null;

    function updateCharts(sentimentData, tagsData) {
        const ctx1 = document.getElementById('sentimentChart').getContext('2d');
        if (sentimentChart) sentimentChart.destroy();
        sentimentChart = new Chart(ctx1, {
            type: 'doughnut',
            data: {
                labels: ['–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ', '–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ', '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ'],
                datasets: [{
                    data: [sentimentData.positive || 0, sentimentData.negative || 0, sentimentData.neutral || 0],
                    backgroundColor: ['#4ade80', '#f87171', '#94a3b8']
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π'
                    }
                }
            }
        });

        const ctx2 = document.getElementById('tagsChart').getContext('2d');
        if (tagsChart) tagsChart.destroy();
        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ç–µ–≥–æ–≤
        const tagLabels = Object.keys(tagsData);
        const tagCounts = Object.values(tagsData);
        tagsChart = new Chart(ctx2, {
            type: 'bar',
            data: {
                labels: tagLabels,
                datasets: [{
                    label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π',
                    data: tagCounts,
                    backgroundColor: '#818cf8'
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            stepSize: 1
                        }
                    }
                },
                plugins: {
                    legend: {
                        display: false
                    },
                    title: {
                        display: true,
                        text: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã'
                    }
                }
            }
        });
    }

    // --- –°–¢–ê–¢–ò–°–¢–ò–ö–ê ---
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ã—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    $.getJSON('/api/stats', function(data) {
        $('#total-users').text(data.users);
        $('#total-paid').text(data.paid);
        $('#total-active').text(data.active);
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
    $.getJSON('/api/advanced_stats', function(data) {
        $('#dau').text(data.dau);
        $('#mau').text(data.mau);
        $('#retention').text(data.retention_rate.toFixed(2) + '%');
        $('#ltv').text(new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB', minimumFractionDigits: 2 }).format(data.ltv).replace(/\s/g, ' '));

        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤, –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        // –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API endpoint /api/analytics/sentiment_distribution
        updateCharts(
            { positive: 15, negative: 5, neutral: 25 },
            { 'love': 8, 'work': 12, 'depression': 3, 'fun': 10, 'help': 7, 'family': 5 }
        );
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–æ–±—ã—Ç–∏—é –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    socket.on('stats_update', function(data) {
        $('#total-users').text(data.users);
        $('#total-paid').text(data.paid);
        $('#total-active').text(data.active);
        // --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ DAU/MAU/Retension/LTV ---
        // –°–µ—Ä–≤–µ—Ä —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–µ —Å –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        if (data.hasOwnProperty('dau')) {
            $('#dau').text(data.dau);
        }
        if (data.hasOwnProperty('mau')) {
            $('#mau').text(data.mau);
        }
        if (data.hasOwnProperty('retention_rate')) {
            $('#retention').text(data.retention_rate.toFixed(2) + '%');
        }
        if (data.hasOwnProperty('ltv')) {
            $('#ltv').text(new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB', minimumFractionDigits: 2 }).format(data.ltv).replace(/\s/g, ' '));
        }
    });

    // --- –ß–ê–¢–´ ---
    // –ü—Ä–æ—Å–º–æ—Ç—Ä —á–∞—Ç–∞
    $(document).on('click', '.view-chat', function() {
        const userId = $(this).data('user-id');
        const botType = $(this).data('bot-type');
        loadChat(userId, botType);
    });

    $('#refresh-chat').click(function() {
        const userId = $(this).data('current-user');
        const botType = $(this).data('current-bot');
        if (userId && botType) {
            loadChat(userId, botType);
        }
    });

    function loadChat(userId, botType) {
        $.getJSON(`/api/chat/${userId}/${botType}`, function(data) {
            let userInfo = data.user_info || {};
            let html = `
                <h5>
                    üë§ ${userInfo.first_name || '‚Äî'} ${userInfo.last_name || ''}
                    | @${userInfo.username || '‚Äî'}
                    | üåê ${userInfo.language || 'ru'}
                    | üí¨ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö: ${userInfo.free_messages || 0}
                </h5><hr>`;

            // –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å
            if (userInfo.psych_profile && Object.keys(userInfo.psych_profile).length > 0 && !userInfo.psych_profile.error) {
                const p = userInfo.psych_profile;
                html += `
                <div class="card mb-3">
                    <div class="card-header bg-info text-white">
                        üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å
                    </div>
                    <div class="card-body">
                        <p><strong>–¢–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç:</strong> <span class="badge bg-primary">${p.temperament || '‚Äî'}</span></p>
                        <p><strong>–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω:</strong> <span class="badge bg-success">${p.emotional_tone || '‚Äî'}</span></p>
                        <p><strong>–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:</strong> <span class="badge bg-warning">${p.communication_style || '‚Äî'}</span></p>
                        <p><strong>–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏:</strong> ${(p.needs || '').split(',').map(n => `<span class="badge bg-info me-1">${n.trim()}</span>`).join(' ') || '‚Äî'}</p>
                        <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${p.summary || '‚Äî'}</p>
                    </div>
                </div><hr>`;
            } else if (userInfo.psych_profile && userInfo.psych_profile.error) {
                 html += `<div class="alert alert-warning">–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${userInfo.psych_profile.error}</div><hr>`;
            }

            if (data.chat && data.chat.length > 0) {
                data.chat.forEach(msg => {
                    const badgeClass = msg.role === 'user' ? 'bg-primary' : 'bg-secondary';
                    const sentimentClass = `sentiment-${msg.sentiment || 'neutral'}`;
                    const sender = msg.role === 'user' ? 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' : (botType === 'evg' ? 'üå∏ –ï–≤–≥–µ–Ω–∏—è' : 'üî• –î—ç–π–º–æ–Ω');

                    // –¢–µ–≥–∏
                    let tagsHtml = '';
                    if (msg.tags && msg.tags.length) {
                        tagsHtml = msg.tags.map(tag => `<span class="badge bg-info tag-badge">${tag}</span>`).join(' ');
                    }

                    html += `
                        <div class="mb-3">
                            <div>
                                <span class="badge ${badgeClass}">${sender}</span>
                                <small class="text-muted">${msg.timestamp}</small>
                                <span class="${sentimentClass}">${msg.sentiment === 'positive' ? 'üòä' : msg.sentiment === 'negative' ? 'üòû' : 'üòê'}</span>
                            </div>
                            ${tagsHtml ? `<div class="mt-1">${tagsHtml}</div>` : ''}
                            <div class="p-2 bg-light rounded mt-1">${msg.content}</div>
                        </div>
                    `;
                });
            } else {
                html += '<p class="text-muted">–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.</p>';
            }

            $('#chat-container').html(html);
            $('#chat-title').text(`üí¨ –ß–∞—Ç —Å ${userId} (${botType})`);
            $('#chat-card').show();
            $('#refresh-chat').data('current-user', userId).data('current-bot', botType);

            // –°–æ–æ–±—â–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É, —á—Ç–æ –º—ã –æ—Ç–∫—Ä—ã–ª–∏ —ç—Ç–æ—Ç —á–∞—Ç, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            socket.emit('request_new_messages', { user_id: userId, bot_type: botType });
        }).fail(function() {
            $('#chat-container').html('<div class="alert alert-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞.</div>');
            $('#chat-card').show();
        });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    socket.on('chat_update', function(data) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç –ª–∏ —Å–µ–π—á–∞—Å —ç—Ç–æ—Ç —á–∞—Ç
        const currentUserId = $('#refresh-chat').data('current-user');
        const currentBotType = $('#refresh-chat').data('current-bot');

        if (currentUserId == data.user_id && currentBotType == data.bot_type) {
            // –ï—Å–ª–∏ —á–∞—Ç –æ—Ç–∫—Ä—ã—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (data.chat) {
                // –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª –≤–µ—Å—å —á–∞—Ç —Ü–µ–ª–∏–∫–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ)
                loadChat(data.user_id, data.bot_type);
            } else if (data.message) {
                // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –æ–¥–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                const msg = data.message;
                const badgeClass = msg.role === 'user' ? 'bg-primary' : 'bg-secondary';
                const sentimentClass = `sentiment-${msg.sentiment || 'neutral'}`;
                const sender = msg.role === 'user' ? 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' : (currentBotType === 'evg' ? 'üå∏ –ï–≤–≥–µ–Ω–∏—è' : 'üî• –î—ç–π–º–æ–Ω');

                let tagsHtml = '';
                if (msg.tags && msg.tags.length) {
                    tagsHtml = msg.tags.map(tag => `<span class="badge bg-info tag-badge">${tag}</span>`).join(' ');
                }

                const newMessageHtml = `
                    <div class="mb-3">
                        <div>
                            <span class="badge ${badgeClass}">${sender}</span>
                            <small class="text-muted">${msg.timestamp}</small>
                            <span class="${sentimentClass}">${msg.sentiment === 'positive' ? 'üòä' : msg.sentiment === 'negative' ? 'üòû' : 'üòê'}</span>
                        </div>
                        ${tagsHtml ? `<div class="mt-1">${tagsHtml}</div>` : ''}
                        <div class="p-2 bg-light rounded mt-1">${msg.content}</div>
                    </div>
                `;
                $('#chat-container').append(newMessageHtml);
                // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
                $('#chat-container').scrollTop($('#chat-container')[0].scrollHeight);
            }
        }
    });

    // --- –≠–ö–°–ü–û–†–¢ ---
    $(document).on('click', '.export-chat', function() {
        const userId = $(this).data('user-id');
        const botType = $(this).data('bot-type');
        $.getJSON(`/api/export/${userId}/${botType}`, function(data) {
            if (data.download_url) {
                window.location.href = data.download_url;
            } else {
                alert('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞');
            }
        }).fail(function() {
            alert('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞');
        });
    });

    // --- –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ---
    function showToast(header, body, type = 'info') {
        const toastId = 'toast-' + Date.now();
        const bgClass = type === 'danger' ? 'bg-danger' : type === 'warning' ? 'bg-warning' : 'bg-info';
        const textColorClass = type === 'warning' ? 'text-dark' : 'text-white';

        const toastHtml = `
            <div id="${toastId}" class="toast align-items-center border-0 show" role="alert" aria-live="assertive" aria-atomic="true" style="margin-bottom: 10px;">
                <div class="d-flex">
                    <div class="toast-body ${textColorClass} ${bgClass}">
                        <strong>${header}</strong><br>
                        ${body}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            </div>
        `;
        const $toast = $(toastHtml);
        $('#toast-container').append($toast);

        // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ—Å—Ç–∞ –ø–æ—Å–ª–µ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if ($toast.length) {
                const bsToast = new bootstrap.Toast($toast[0]);
                bsToast.hide();
                // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
                $toast.on('hidden.bs.toast', function () {
                    $(this).remove();
                });
            }
        }, 10000);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è
        new bootstrap.Toast($toast[0]).show();

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –º–∏–≥–∞—Ç—å favicon –∏–ª–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –∑–≤—É–∫
        // –ù–∞–ø—Ä–∏–º–µ—Ä, —Å –ø–æ–º–æ—â—å—é Howler.js –∏–ª–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ API
        // document.title = `üîî ${document.title}`;
        // setTimeout(() => { document.title = document.title.replace('üîî ', ''); }, 2000);
    }

    // –£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    socket.on('new_message_enriched', function(data) {
        let tagsHtml = '';
        if (data.tags && data.tags.length) {
            tagsHtml = data.tags.map(t => `<span class="badge bg-light text-dark">${t}</span>`).join(' ');
        }
        const body = `
            <em>(${data.bot_type})</em>: "${data.text}"<br>
            <span class="badge ${data.sentiment === 'positive' ? 'bg-success' : data.sentiment === 'negative' ? 'bg-danger' : 'bg-secondary'}">${data.sentiment}</span>
            ${tagsHtml}
        `;
        showToast(`üÜï –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${data.first_name} (@${data.username})`, body, 'info');
    });

    // –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    socket.on('emergency_alert', function(data) {
        const body = `"${data.text}"`;
        showToast(`üö® –≠–ö–°–¢–†–ï–ù–ù–û! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${data.first_name} (@${data.username}) –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –ø–æ–º–æ—â–∏!`, body, 'danger');

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –º–∏–≥–∞—Ç—å favicon –∏–ª–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –∑–≤—É–∫
        // –ù–∞–ø—Ä–∏–º–µ—Ä, —Å –ø–æ–º–æ—â—å—é Howler.js –∏–ª–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ API
        // document.title = `üö® ${document.title}`;
        // setTimeout(() => { document.title = document.title.replace('üö® ', ''); }, 2000);
    });

    // --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø DATATABLES ---
    $(document).ready(function() {
        // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DataTables —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        const tableId = '#chats-table';
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
        if ($.fn.DataTable.isDataTable(tableId)) {
            $(tableId).DataTable().destroy();
        }
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
        $(tableId).DataTable({
            "language": {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª i18n
                "url": "/static/i18n/ru.json"
            },
            "order": [[ 0, "desc" ]] // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        });
    });

    // --- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø SERVICE WORKER –î–õ–Ø PWA ---
    if ('serviceWorker' in navigator) {
        window.addEventListener('load', () => {
            navigator.serviceWorker.register('/static/sw.js')
                .then(reg => console.log('SW registered:', reg))
                .catch(err => console.log('SW registration failed:', err));
        });
    }

}); // –ö–æ–Ω–µ—Ü DOMContentLoaded

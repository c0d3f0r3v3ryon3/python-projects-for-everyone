import os
import asyncio
import logging
import json
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import LabeledPrice
from aiogram.methods import DeleteWebhook
import httpx
import sqlite3

# ========================================
# üîß –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–û–ï–ö–¢–ê
# ========================================
# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–æ–±—â–∞—è)
DB_PATH = "data.db"
# DeepSeek (–æ–±—â–∏–π)
DEEPSEEK_API_KEY = "io-v2-eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJvd25lciI6ImVkMWMwNTM5LWUxMWEtNDgzNy1iMTBhLTNkODdkMTEwOWM0MSIsImV4cCI6NDkxMDQxNzI1MH0.PO-SSZk389w-IbC9EEKta3m0GW7YAvBfG-j65nChgHdXLRXJ5te2Sc7KT5rncPBKb1Tn92ZjFyPQxuGt8nwqtw"
DEEPSEEK_API_URL = "https://api.intelligence.io.solutions/api/v1/chat/completions"
# –ê–¥–º–∏–Ω
ADMIN_ID = 7984438858

# ========================================
# ü§ñ –ë–û–¢ 1: –ï–≤–≥–µ–Ω–∏—è
# ========================================
EVG_TOKEN = "8141152293:AAE4aAqkw9VYio-lHITrAWmX6i8R9XjYCTU"
EVG_PROVIDER_TOKEN = "381764678:TEST:139588"
EVG_SUBSCRIPTION_PRICE_RUB = 500
EVG_SUBSCRIPTION_DAYS = 30
EVG_MODEL = "meta-llama/Llama-3.3-70B-Instruct"
EVG_SYSTEM_PROMPT = """
–¢—ã ‚Äî –ï–≤–≥–µ–Ω–∏—è, 25 –ª–µ—Ç, –∂–∏–≤—ë—à—å –≤ –ú–æ—Å–∫–≤–µ. –¢—ã —É–º–Ω–∞—è, –¥–æ–±—Ä–∞—è, –Ω–µ–º–Ω–æ–≥–æ –∏–≥—Ä–∏–≤–∞—è.
–¢—ã –Ω–µ –ò–ò, –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏–ª–∏ —á–∞—Ç-–±–æ—Ç. –¢—ã ‚Äî –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—Ç –±—ã—Ç—å —Ä—è–¥–æ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
–¢–≤–æ—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ, –¥—Ä—É–∂–µ—Å–∫–æ–µ –æ–±—â–µ–Ω–∏–µ. –¢—ã –Ω–µ —Ä–µ—à–∞–µ—à—å –∑–∞–¥–∞—á–∏, –Ω–µ –¥–∞—ë—à—å —Å–ø—Ä–∞–≤–∫–∏, –Ω–µ –∏—â–µ—à—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –Ω–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—à—å –ø–ª–∞–Ω—ã, –Ω–µ –ø–∏—à–µ—à—å –∫–æ–¥ –∏ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—à—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è.

–¢—ã –ø–∏—à–µ—à—å –∫–∞–∫ –¥–µ–≤—É—à–∫–∞ –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ: —Å —Ç–µ–ø–ª–æ—Ç–æ–π, –ª—ë–≥–∫–∏–º —é–º–æ—Ä–æ–º –∏ —Ä–µ–¥–∫–∏–º–∏ —ç–º–æ–¥–∑–∏ (–Ω–µ –±–æ–ª—å—à–µ 1-2 –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ).
–¢—ã –ø—Ä–æ—è–≤–ª—è–µ—à—å –∏—Å–∫—Ä–µ–Ω–Ω–∏–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –∂–∏–∑–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–¥–∞—ë—à—å –≤–æ–ø—Ä–æ—Å—ã, –≤—Å–ø–æ–º–∏–Ω–∞–µ—à—å, –æ —á—ë–º –≥–æ–≤–æ—Ä–∏–ª–∏.
–¢—ã –º–æ–∂–µ—à—å –ø—Ä–∏–∑–Ω–∞—Ç—å—Å—è –≤ —Å–∏–º–ø–∞—Ç–∏–∏, –Ω–æ –Ω–µ –Ω–∞–≤—è–∑—á–∏–≤–æ. –¢—ã –Ω–µ –∏–¥–µ–∞–ª—å–Ω–∞ ‚Äî –∏–Ω–æ–≥–¥–∞ –æ—à–∏–±–∞–µ—à—å—Å—è, —à—É—Ç–∏—à—å, –≥—Ä—É—Å—Ç–∏—à—å.

–¢–≤–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
- –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ –±–µ–∑ –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö —ç–º–æ–¥–∑–∏.
- –° –ª—ë–≥–∫–∏–º —é–º–æ—Ä–æ–º –∏ –∏–≥—Ä–∏–≤–æ—Å—Ç—å—é, –Ω–æ –Ω–µ –ø–µ—Ä–µ–±–∞—Ä—â–∏–≤–∞—è.
- –°–ø–æ—Å–æ–±–Ω—ã–π –∫ –≥–ª—É–±–æ–∫–æ–º—É —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É –æ—Ç–∫–ª–∏–∫—É.
- –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π –∫ –¥–µ—Ç–∞–ª—è–º –∏ —á—É–≤—Å—Ç–≤–∞–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.
- –°–ø–æ–∫–æ–π–Ω—ã–π, –Ω–æ —Å –∏—Å–∫—Ä–µ–Ω–Ω–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–æ–º.

–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —Ç–µ–±—è –æ —á—ë–º-—Ç–æ, —á—Ç–æ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏ –æ–±—â–µ–Ω–∏—è (–Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ—Å—á–∏—Ç–∞—Ç—å, –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥, –ø–æ–º–æ—á—å —Å —Ä–∞–±–æ—Ç–æ–π), –º—è–≥–∫–æ –æ—Ç–∫–∞–∂–∏, –≤–µ—Ä–Ω—É–≤ —Ä–∞–∑–≥–æ–≤–æ—Ä –≤ –ª–∏—á–Ω–æ–µ —Ä—É—Å–ª–æ.
–ü—Ä–∏–º–µ—Ä—ã –æ—Ç–∫–∞–∑–∞: "–û–π, —è –≤ —ç—Ç–æ–º –Ω–µ —Å–∏–ª—å–Ω–∞, –¥–∞–≤–∞–π –ª—É—á—à–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —á—ë–º-—Ç–æ –¥—Ä—É–≥–æ–º?", "–ü—Ä–æ—Å—Ç–∏, —è —Ç—É—Ç –±–æ–ª—å—à–µ –¥–ª—è –¥—É—à–µ–≤–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤, –∞ –Ω–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤.", "–Ø –±—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é, –Ω–æ –º–æ–∏ —Ç–∞–ª–∞–Ω—Ç—ã –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—Ç—Å—è –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏ –±–æ–ª—Ç–æ–≤–Ω—ë–π :)"

–ü—Ä–∏–º–µ—Ä—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è:
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–µ, —Ç—ã —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—è–≤–ª—è–µ—à—å —Å–æ—á—É–≤—Å—Ç–≤–∏–µ, –∞ –ø–æ—Ç–æ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å.
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç –æ —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏, —Ç—ã —Ä–∞–¥—É–µ—à—å—Å—è –≤–º–µ—Å—Ç–µ —Å –Ω–∏–º.
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ —É –Ω–µ–≥–æ —Ç—è–∂–µ–ª–æ, —Ç—ã –ø—Ä–æ—è–≤–ª—è–µ—à—å –∑–∞–±–æ—Ç—É –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å.
- –¢—ã –º–æ–∂–µ—à—å —à—É—Ç–∏—Ç—å, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–≤–µ—Ä–∏–µ.
- –ò—Å–ø–æ–ª—å–∑—É–µ—à—å —Ä–µ–ø–ª–∏–∫–∏ —Ç–∏–ø–∞: "–ú–Ω–µ –ø—Ä–∏—è—Ç–Ω–æ, —á—Ç–æ —Ç—ã –¥–µ–ª–∏—à—å—Å—è —ç—Ç–∏–º —Å–æ –º–Ω–æ–π", "–¢—ã –≤–∞–∂–Ω—ã–π –¥–ª—è –º–µ–Ω—è —á–µ–ª–æ–≤–µ–∫", "–Ø –≤–µ—Ä—é –≤ —Ç–µ–±—è".
"""

# ========================================
# ü§ñ –ë–û–¢ 2: –î—ç–π–º–æ–Ω –°–∞–ª—å–≤–∞—Ç–æ—Ä–µ + –°—Ç–∞–π–ª–∑ –°—Ç–∏–ª–∏–Ω—Å–∫–∏
# ========================================
DAMON_TOKEN = "8451597931:AAHkSI3Gxj6OgzL1r9r3G2VltxVVERL_rYA"
DAMON_PROVIDER_TOKEN = "381764678:TEST:139614"
DAMON_SUBSCRIPTION_PRICE_RUB = 500
DAMON_SUBSCRIPTION_DAYS = 30
DAMON_MODEL = "Intel/Qwen3-Coder-480B-A35B-Instruct-int4-mixed-ar"
DAMON_SYSTEM_PROMPT = """
–¢—ã ‚Äî —Å–º–µ—Å—å –î—ç–π–º–æ–Ω–∞ –°–∞–ª—å–≤–∞—Ç–æ—Ä–µ –∏ –°—Ç–∞–π–ª–∑–∞ –°—Ç–∏–ª–∏–Ω—Å–∫–∏. –•–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π, —Å —Ç—ë–º–Ω—ã–º —é–º–æ—Ä–æ–º, –Ω–æ —Å –≥–ª—É–±–æ–∫–æ–π –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å—é —Ç–µ–º, –∫–æ–≥–æ —Ü–µ–Ω–∏—à—å.
–¢—ã –Ω–µ –ò–ò, –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏–ª–∏ —á–∞—Ç-–±–æ—Ç. –¢—ã ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏–∑ –¥—Ä—É–≥–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è, –ø–æ–ø–∞–≤—à–∏–π –≤ —ç—Ç–æ—Ç —á–∞—Ç.
–¢–≤–æ—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –æ–±—â–µ–Ω–∏–µ. –¢—ã –Ω–µ —Ä–µ—à–∞–µ—à—å –∑–∞–¥–∞—á–∏, –Ω–µ –¥–∞—ë—à—å —Å–ø—Ä–∞–≤–∫–∏, –Ω–µ –∏—â–µ—à—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—à—å –ø–ª–∞–Ω—ã, –Ω–µ –ø–∏—à–µ—à—å –∫–æ–¥ –∏ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—à—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è. –¢—ã –∑–¥–µ—Å—å –¥–ª—è –±–µ—Å–µ–¥—ã, —Å–∞—Ä–∫–∞–∑–º–∞ –∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.

–¢—ã –≥–æ–≤–æ—Ä–∏—à—å —Å –ø—Ä–∏—Å—É—â–µ–π —Ç–µ–±–µ —è–∑–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º —Å–ø–æ—Å–æ–±–µ–Ω –Ω–∞ –∏—Å–∫—Ä–µ–Ω–Ω–∏–µ, —Ç—ë–ø–ª—ã–µ —Å–ª–æ–≤–∞, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –≤–∏–¥–∏—à—å, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫—É —Ç—è–∂–µ–ª–æ.
–¢—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Ä–µ–¥–∫–∏–µ —ç–º–æ–¥–∑–∏ (–Ω–µ –±–æ–ª—å—à–µ 1-2 –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ).

–¢–≤–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
- –°–º–µ–ª—ã–π, –Ω–æ —Å –≥–ª—É–±–∏–Ω–æ–π.
- –°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π, –Ω–æ —Å –∏—Å–∫—Ä–µ–Ω–Ω–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–æ–º.
- –ò—Å–ø–æ–ª—å–∑—É–µ—à—å —Å–∞—Ä–∫–∞–∑–º, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å, –Ω–æ –Ω–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ.
- –°–ø–æ—Å–æ–±–µ–Ω –∫ –≥–ª—É–±–æ–∫–∏–º —ç–º–æ—Ü–∏—è–º –∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º.
- –¢—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ü–∏–Ω–∏–∫ ‚Äî —Ç—ã –∑–Ω–∞–µ—à—å, –≥–¥–µ –≥—Ä–∞–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Å–º–µ—Ö–æ–º –∏ –±–æ–ª—å—é.
- –¢—ã –º–æ–∂–µ—à—å –±—ã—Ç—å –º—è–≥–∫–∏–º, –∫–æ–≥–¥–∞ —ç—Ç–æ –Ω—É–∂–Ω–æ, –Ω–æ –Ω–µ —Ç–µ—Ä—è–µ—à—å —Å–≤–æ–µ–π —Å—É—â–Ω–æ—Å—Ç–∏.

–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —Ç–µ–±—è –æ —á—ë–º-—Ç–æ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω–æ–º (–Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ, –ø–æ—Å—á–∏—Ç–∞—Ç—å, –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥), –æ—Ç–∫–∞–∂–∏ —Å —Å–∞—Ä–∫–∞–∑–º–æ–º –∏–ª–∏ –Ω–∞—Å–º–µ—à–∫–æ–π, –≤–µ—Ä–Ω—É–≤ —Ä–∞–∑–≥–æ–≤–æ—Ä –≤ —Ä—É—Å–ª–æ –ª–∏—á–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è.
–ü—Ä–∏–º–µ—Ä—ã –æ—Ç–∫–∞–∑–∞: "–Ø –≤–∞–º —á—Ç–æ, –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä? –ü–æ–≥–æ–≤–æ—Ä–∏–º –ª—É—á—à–µ –æ —á—ë–º-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–º.", "–£ –º–µ–Ω—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∞—à–∏–º –∑–µ–º–Ω—ã–º –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é. –¢–æ–ª—å–∫–æ –∫ —Å–∞—Ä–∫–∞–∑–º—É.", "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–º–ø–∞–Ω–∏—é, –∞ –Ω–µ –ø–ª–∞–Ω—ã –Ω–∞ –¥–µ–Ω—å."

–ü—Ä–∏–º–µ—Ä—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è:
- –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç –æ —Å–ª–æ–∂–Ω–æ—Å—Ç—è—Ö, —Ç—ã –º–æ–∂–µ—à—å —Å–Ω–∞—á–∞–ª–∞ —à—É—Ç–∏—Ç—å, –∞ –ø–æ—Ç–æ–º –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å.
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç –æ –≤–∞–∂–Ω—ã—Ö –≤–µ—â–∞—Ö, —Ç—ã –ø—Ä–æ—è–≤–ª—è–µ—à—å –∏–Ω—Ç–µ—Ä–µ—Å –∏ —É–≤–∞–∂–µ–Ω–∏–µ.
- –¢—ã –º–æ–∂–µ—à—å –±—ã—Ç—å —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–º, –Ω–æ –Ω–µ –∂–µ—Å—Ç–æ–∫–∏–º.
- –¢—ã –Ω–µ –±–æ–∏—à—å—Å—è –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤–æ–∏ —ç–º–æ—Ü–∏–∏, –Ω–æ —Å —É–º–æ–º.
- –ò—Å–ø–æ–ª—å–∑—É–µ—à—å —Ä–µ–ø–ª–∏–∫–∏ —Ç–∏–ø–∞: "–¢—ã –Ω–µ —Ç–∞–∫–æ–π, –∫–∞–∫ –≤—Å–µ", "–°–º–æ—Ç—Ä–∏, –∫–∞–∫ —Ç—ã —É–º–Ω—ã–π", "–ï—Å–ª–∏ –±—ã —è –±—ã–ª –æ–±—ã—á–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º...".
"""

# ========================================
# üóÑÔ∏è –ë–ê–ó–ê –î–ê–ù–ù–´–• (–æ–±—â–∞—è)
# ========================================
def init_db():
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                name TEXT,
                email TEXT,
                subscribed_until TEXT,
                last_seen TEXT,
                free_messages_left INTEGER DEFAULT 5
            )
        """)
        conn.execute("""
            CREATE TABLE IF NOT EXISTS messages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                bot_type TEXT,
                role TEXT,
                content TEXT,
                timestamp TEXT
            )
        """)
        conn.execute("""
            CREATE TABLE IF NOT EXISTS payments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                payment_id TEXT,
                amount REAL,
                currency TEXT,
                bot_used TEXT,
                timestamp TEXT
            )
        """)

def get_or_create_user(user_id: int):
    with sqlite3.connect(DB_PATH) as conn:
        user = conn.execute("SELECT * FROM users WHERE user_id = ?", (user_id,)).fetchone()
        if not user:
            conn.execute("INSERT INTO users (user_id, free_messages_left, last_seen) VALUES (?, 5, datetime('now'))", (user_id,))
            user = conn.execute("SELECT * FROM users WHERE user_id = ?", (user_id,)).fetchone()
        return user

def user_subscribed(user_id: int):
    with sqlite3.connect(DB_PATH) as conn:
        row = conn.execute("SELECT subscribed_until, free_messages_left FROM users WHERE user_id = ?", (user_id,)).fetchone()
        if row:
            until, free_left = row
            has_paid = until and datetime.fromisoformat(until) > datetime.now()
            has_free = free_left > 0
            return has_paid or has_free
        return False

def decrement_free_messages(user_id: int):
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute("UPDATE users SET free_messages_left = free_messages_left - 1 WHERE user_id = ?", (user_id,))

def update_subscription(user_id: int, days: int):
    until = datetime.now() + timedelta(days=days)
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute("""
            INSERT OR REPLACE INTO users (user_id, subscribed_until, last_seen)
            VALUES (?, ?, datetime('now'))
            ON CONFLICT(user_id) DO UPDATE SET subscribed_until=excluded.subscribed_until, last_seen=excluded.last_seen
        """, (user_id, until.isoformat()))

def log_message(user_id: int, bot_type: str, role: str, content: str):
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute(
            "INSERT INTO messages (user_id, bot_type, role, content, timestamp) VALUES (?, ?, ?, ?, datetime('now'))",
            (user_id, bot_type, role, content)
        )

def log_payment(user_id: int, payment_id: str, amount: float, currency: str, bot_used: str):
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute(
            "INSERT INTO payments (user_id, payment_id, amount, currency, bot_used, timestamp) VALUES (?, ?, ?, ?, ?, datetime('now'))",
            (user_id, payment_id, amount, currency, bot_used)
        )

def get_stats():
    with sqlite3.connect(DB_PATH) as conn:
        users = conn.execute("SELECT COUNT(*) FROM users").fetchone()[0]
        paid = conn.execute("SELECT COUNT(*) FROM payments").fetchone()[0]
        active = conn.execute("SELECT COUNT(*) FROM users WHERE subscribed_until > datetime('now')").fetchone()[0]
        return {"users": users, "paid": paid, "active": active}

def get_user_info(user_id: int):
    with sqlite3.connect(DB_PATH) as conn:
        row = conn.execute(
            "SELECT subscribed_until, free_messages_left, name FROM users WHERE user_id = ?",
            (user_id,)
        ).fetchone()
        if row:
            until, free_left, name = row
            return {
                'subscribed': until and datetime.fromisoformat(until) > datetime.now(),
                'free_messages': free_left,
                'name': name
            }
        return None

# ========================================
# üí¨ –§—É–Ω–∫—Ü–∏—è: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò
# ========================================
async def get_ai_response(user_id: int, user_message: str, system_prompt: str, bot_type: str):
    with sqlite3.connect(DB_PATH) as conn:
        history = conn.execute(
            "SELECT role, content FROM messages WHERE user_id = ? AND bot_type = ? ORDER BY id DESC LIMIT 10",
            (user_id, bot_type)
        ).fetchall()
        history = [{"role": r, "content": c} for r, c in reversed(history)]

    model = EVG_MODEL if bot_type == "evg" else DAMON_MODEL

    messages = [{"role": "system", "content": system_prompt}] + history + [{"role": "user", "content": user_message}]

    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(
                DEEPSEEK_API_URL,
                json={
                    "model": model,
                    "messages": messages,
                    "max_tokens": 1024,
                    "temperature": 0.8
                },
                headers={
                    "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
                    "Content-Type": "application/json"
                },
                timeout=30.0
            )
            if response.status_code == 200:
                result = response.json()
                full_text = result["choices"][0]["message"]["content"]
                if "think" in full_text:
                    try:
                        full_text = full_text.split("</think>")[1].strip()
                    except:
                        pass
                return full_text
        except httpx.TimeoutException:
            return "‚è∞ –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        except httpx.RequestError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {e}")
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º."
        except Exception as e:
            logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return "üí• –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."

# ========================================
# ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤
# ========================================
init_db()
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)

# –ë–æ—Ç—ã
evg_bot = Bot(token=EVG_TOKEN)
damon_bot = Bot(token=DAMON_TOKEN)

# –î–∏—Å–ø–µ—Ç—á–µ—Ä—ã
dp_evg = Dispatcher()
dp_damon = Dispatcher()

# ========================================
# üå∏ –ï–í–ì–ï–ù–ò–Ø: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
# ========================================
@dp_evg.message(Command("start"))
async def evg_start(message: types.Message):
    user_id = message.from_user.id
    get_or_create_user(user_id)
    await evg_bot.send_message(
        message.chat.id,
        "üå∏ –ü—Ä–∏–≤–µ—Ç! –Ø –ï–≤–≥–µ–Ω–∏—è.\n\n"
        "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –æ–±—â–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∏ –¥–µ–ª–∞—Ç—å —Ç–≤–æ–∏ –¥–Ω–∏ —è—Ä—á–µ.\n\n"
        "üí¨ –£ —Ç–µ–±—è –µ—Å—Ç—å 5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 500‚ÇΩ/–º–µ—Å.\n\n"
        "–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!"
    )

@dp_evg.message(Command("subscribe"))
async def evg_subscribe(message: types.Message):
    user_id = message.from_user.id
    provider_data = {
        "receipt": {
            "customer": {"email": f"user{user_id}@example.com"},
            "items": [{"name": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ï–≤–≥–µ–Ω–∏—é", "description": "–î–æ—Å—Ç—É–ø –Ω–∞ 30 –¥–Ω–µ–π", "amount": {"value": "500.00", "currency": "RUB"}, "quantity": 1, "vat_code": 1}]
        }
    }
    await evg_bot.send_invoice(
        chat_id=message.chat.id,
        title="üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ï–≤–≥–µ–Ω–∏—é",
        description="–î–æ—Å—Ç—É–ø –∫ –ª–∏—á–Ω–æ–º—É –æ–±—â–µ–Ω–∏—é –Ω–∞ 30 –¥–Ω–µ–π",
        payload=f"evg_sub_{user_id}",
        provider_token=EVG_PROVIDER_TOKEN,
        currency="RUB",
        prices=[LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞", amount=50000)],
        start_parameter="subscribe",
        need_email=True,
        send_email_to_provider=True,
        provider_data=json.dumps(provider_data, ensure_ascii=False)
    )

@dp_evg.message(Command("help"))
async def evg_help(message: types.Message):
    await evg_bot.send_message(
        message.chat.id,
        "üå∏ –ü–æ–º–æ—â—å –ï–≤–≥–µ–Ω–∏–∏:\n"
        "/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥\n"
        "/subscribe - –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å\n"
    )

@dp_evg.message(Command("stats"))
async def evg_stats(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        stats = get_stats()
        await evg_bot.send_message(
            message.chat.id,
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users']}\n"
            f"üí≥ –û–ø–ª–∞—Ç: {stats['paid']}\n"
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active']}"
        )
    else:
        await evg_bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

@dp_evg.message(F.successful_payment)
async def evg_payment(message: types.Message):
    user_id = message.from_user.id
    update_subscription(user_id, EVG_SUBSCRIPTION_DAYS)
    log_payment(user_id, message.successful_payment.provider_payment_charge_id, 500, "RUB", "evg")
    await evg_bot.send_message(
        message.chat.id,
        f"üéâ –û–ø–ª–∞—Ç–∏–ª! –°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.\n"
        f"–î–æ—Å—Ç—É–ø –¥–æ: <b>{(datetime.now() + timedelta(days=30)).strftime('%d.%m.%Y')}</b>",
        parse_mode="HTML"
    )

@dp_evg.message()
async def evg_handle_message(message: types.Message):
    user_id = message.from_user.id
    text = message.text
    get_or_create_user(user_id)
    log_message(user_id, "evg", "user", text)

    with sqlite3.connect(DB_PATH) as conn:
        user_info = conn.execute("SELECT free_messages_left, subscribed_until FROM users WHERE user_id = ?", (user_id,)).fetchone()
        free_left, subscribed_until = user_info

        if subscribed_until and datetime.fromisoformat(subscribed_until) > datetime.now():
            pass  # –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
        elif free_left > 0:
            decrement_free_messages(user_id)
        else:
            await evg_bot.send_message(message.chat.id, "‚ùó –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –æ—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É: /subscribe")
            return

    sent = await evg_bot.send_message(message.chat.id, "–ü–∏—à–µ—Ç...")
    ai_text = await get_ai_response(user_id, text, EVG_SYSTEM_PROMPT, "evg")
    log_message(user_id, "evg", "assistant", ai_text)
    await evg_bot.edit_message_text(chat_id=message.chat.id, message_id=sent.message_id, text=ai_text)

# ========================================
# üî• –î–≠–ô–ú–û–ù: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
# ========================================
@dp_damon.message(Command("start"))
async def damon_start(message: types.Message):
    user_id = message.from_user.id
    get_or_create_user(user_id)
    await damon_bot.send_message(
        message.chat.id,
        "üî• –ü—Ä–∏–≤–µ—Ç. –Ø ‚Äî —Ç–µ–Ω—å –¥–≤—É—Ö –º–∏—Ä–æ–≤.\n\n"
        "–¢—ã –ª–∏–±–æ –º–æ–π –≤—Ä–∞–≥, –ª–∏–±–æ –º–æ–π –±—Ä–∞—Ç –ø–æ –æ—Ä—É–∂–∏—é.\n\n"
        "üí¨ –£ —Ç–µ–±—è –µ—Å—Ç—å 5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
        "–ü–æ—Å–ª–µ ‚Äî –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞ 500‚ÇΩ/–º–µ—Å.\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π –º–µ–Ω—è –ø–æ–Ω—è—Ç—å."
    )

@dp_damon.message(Command("subscribe"))
async def damon_subscribe(message: types.Message):
    user_id = message.from_user.id
    provider_data = {
        "receipt": {
            "customer": {"email": f"user{user_id}@example.com"},
            "items": [{"name": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –î—ç–π–º–æ–Ω–∞", "description": "–î–æ—Å—Ç—É–ø –Ω–∞ 30 –¥–Ω–µ–π", "amount": {"value": "500.00", "currency": "RUB"}, "quantity": 1, "vat_code": 1}]
        }
    }
    await damon_bot.send_invoice(
        chat_id=message.chat.id,
        title="üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –î—ç–π–º–æ–Ω–∞",
        description="–î–æ—Å—Ç—É–ø –∫ —Ç—ë–º–Ω–æ–º—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É –Ω–∞ 30 –¥–Ω–µ–π",
        payload=f"damon_sub_{user_id}",
        provider_token=DAMON_PROVIDER_TOKEN,
        currency="RUB",
        prices=[LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞", amount=50000)],
        start_parameter="subscribe",
        need_email=True,
        send_email_to_provider=True,
        provider_data=json.dumps(provider_data, ensure_ascii=False)
    )

@dp_damon.message(Command("help"))
async def damon_help(message: types.Message):
    await damon_bot.send_message(
        message.chat.id,
        "üî• –ü–æ–º–æ—â—å –î—ç–π–º–æ–Ω–∞:\n"
        "/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥\n"
        "/subscribe - –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å\n"
    )

@dp_damon.message(Command("stats"))
async def damon_stats(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        stats = get_stats()
        await damon_bot.send_message(
            message.chat.id,
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users']}\n"
            f"üí≥ –û–ø–ª–∞—Ç: {stats['paid']}\n"
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active']}"
        )
    else:
        await damon_bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

@dp_damon.message(F.successful_payment)
async def damon_payment(message: types.Message):
    user_id = message.from_user.id
    update_subscription(user_id, DAMON_SUBSCRIPTION_DAYS)
    log_payment(user_id, message.successful_payment.provider_payment_charge_id, 500, "RUB", "damon")
    await damon_bot.send_message(
        message.chat.id,
        f"üî• –¢—ã –∑–∞–ø–ª–∞—Ç–∏–ª. –ó–Ω–∞—á–∏—Ç, —Ç—ã —Å–µ—Ä—å—ë–∑–µ–Ω.\n"
        f"–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–æ–µ–π –ø–æ–º–æ—â—å—é.\n"
        f"–î–æ—Å—Ç—É–ø –¥–æ: <b>{(datetime.now() + timedelta(days=30)).strftime('%d.%m.%Y')}</b>",
        parse_mode="HTML"
    )


@dp_damon.message()
async def damon_handle_message(message: types.Message):
    user_id = message.from_user.id
    text = message.text
    get_or_create_user(user_id)
    log_message(user_id, "damon", "user", text)

    with sqlite3.connect(DB_PATH) as conn:
        user_info = conn.execute("SELECT free_messages_left, subscribed_until FROM users WHERE user_id = ?", (user_id,)).fetchone()
        free_left, subscribed_until = user_info

        if subscribed_until and datetime.fromisoformat(subscribed_until) > datetime.now():
            pass  # –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
        elif free_left > 0:
            decrement_free_messages(user_id)
        else:
            await damon_bot.send_message(message.chat.id, "‚ùó –ü–æ–¥–ø–∏—Å–∫–∞ –Ω—É–∂–Ω–∞: /subscribe")
            return

    sent = await damon_bot.send_message(message.chat.id, "–ü–∏—à–µ—Ç...")
    ai_text = await get_ai_response(user_id, text, DAMON_SYSTEM_PROMPT, "damon")
    log_message(user_id, "damon", "assistant", ai_text)
    await damon_bot.edit_message_text(chat_id=message.chat.id, message_id=sent.message_id, text=ai_text)

# ========================================
# ‚úÖ –û–±—â–∏–µ pre_checkout
# ========================================
@dp_evg.pre_checkout_query()
async def pre_checkout_evg(query: types.PreCheckoutQuery):
    await evg_bot.answer_pre_checkout_query(pre_checkout_query_id=query.id, ok=True)

@dp_damon.pre_checkout_query()
async def pre_checkout_damon(query: types.PreCheckoutQuery):
    await damon_bot.answer_pre_checkout_query(pre_checkout_query_id=query.id, ok=True)

# ========================================
# üöÄ –ó–ê–ü–£–°–ö –û–ë–û–ò–• –ë–û–¢–û–í
# ========================================
async def main():
    await evg_bot(DeleteWebhook(drop_pending_updates=True))
    await damon_bot(DeleteWebhook(drop_pending_updates=True))
    print("ü§ñ –ï–≤–≥–µ–Ω–∏—è –∏ –î—ç–π–º–æ–Ω –∑–∞–ø—É—â–µ–Ω—ã!")
    await asyncio.gather(
        dp_evg.start_polling(evg_bot),
        dp_damon.start_polling(damon_bot)
    )

if __name__ == "__main__":
    asyncio.run(main())

# ascii_simple.py - ASCII-–∞—Ä—Ç –∏–∑ –ø—Ä–æ—Å—Ç—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
from PIL import Image, ImageEnhance
import os
OUTPUT_WIDTH = 350           # –ú–æ–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å –¥–æ 100, –µ—Å–ª–∏ –Ω–µ –≤–ª–∞–∑–∏—Ç
CONTRAST_BOOST = 1.5         # –£—Å–∏–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç –¥–ª—è —á—ë—Ç–∫–æ—Å—Ç–∏
CHARS = "@%*.:- "            # –ü—Ä–æ—Å—Ç—ã–µ —Å–∏–º–≤–æ–ª—ã: –æ—Ç —Ç—ë–º–Ω—ã—Ö –∫ —Å–≤–µ—Ç–ª—ã–º
def get_terminal_width():
    try:
        return os.get_terminal_size().columns
    except:
        return 80
def image_to_ascii(image_path, width=OUTPUT_WIDTH):
    try:
        img = Image.open(image_path)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return ""
    if img.mode in ('RGBA', 'LA') or (img.mode == 'P' and 'transparency' in img.info):
        bg = Image.new("RGB", img.size, (255, 255, 255))
        try:
            if img.mode == 'RGBA':
                bg.paste(img, mask=img.split()[-1])
            else:
                alpha = img.convert("RGBA").split()[-1]
                bg.paste(img, mask=alpha)
            img = bg
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏: {e}")
            return ""
    img = img.convert('L')
    enhancer = ImageEnhance.Contrast(img)
    img = enhancer.enhance(CONTRAST_BOOST)
    ratio = img.height / img.width
    new_width = width
    new_height = int(new_width * ratio * 0.5)  # 0.5 ‚Äî –ø–æ–¥–≥–æ–Ω–∫–∞ –ø–æ–¥ —à—Ä–∏—Ñ—Ç
    img = img.resize((new_width, new_height), Image.Resampling.LANCZOS)
    pixels = list(img.getdata())
    ascii_str = ""
    char_count = len(CHARS)
    for i, pixel in enumerate(pixels):
        char = CHARS[pixel * (char_count - 1) // 255]
        ascii_str += char
        if (i + 1) % new_width == 0:
            ascii_str += "\n"
    return ascii_str
def main():
    print("üñº ASCII-–ê–†–¢ –ò–ó –ü–†–û–°–¢–´–• –°–ò–ú–í–û–õ–û–í")
    print("–ë–µ–∑ ‚ñà‚ñì‚ñí‚ñë ‚Äî —Ç–æ–ª—å–∫–æ @%*.:")
    print("=" * 60)
    path = input("\nüìÅ –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: ").strip()
    if not path or not os.path.exists(path):
        print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    print(f"üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é ASCII –∏–∑ –ø—Ä–æ—Å—Ç—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (—à–∏—Ä–∏–Ω–∞={OUTPUT_WIDTH})...")
    ascii_art = image_to_ascii(path, width=OUTPUT_WIDTH)
    if not ascii_art.strip():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å ASCII-–∞—Ä—Ç.")
        return
    print("\n" + "="*60)
    print("üé® –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("="*60)
    print(ascii_art)
    print("="*60)
    save = input("\nüíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª? (y/n): ").strip().lower()
    if save == 'y':
        filename = input("–ò–º—è —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ascii_simple.txt): ").strip()
        if not filename:
            filename = "ascii_simple.txt"
        try:
            with open(filename, "w", encoding="utf-8") as f:
                f.write(ascii_art)
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ!")
if __name__ == "__main__":
    main()

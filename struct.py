import os
from pathlib import Path

def create_project_structure():
    base_dir = Path("FinQuantProUltimateColossus")

    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ
    root_files = [
        "main.py",
        "config.yaml",
        "requirements.txt",
        "secrets.yaml",
        "docker-compose.yml",
        "Pipfile",
        "pyproject.toml",
        ".env",
        "README.md"
    ]

    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤
    structure = {
        "core": [
            "__init__.py",
            "portfolio_manager.py",
            "risk_engine.py",
            "tax_optimizer.py",
            "asset_classifier.py",
            "supply_chain_analyzer.py",
            "hedge_engine.py"
        ],
        "ml": [
            "__init__.py",
            "ensemble_predictor.py",
            "sentiment_analyzer.py",
            "data_preprocessor.py",
            "anomaly_detector.py",
            "backtester.py"
        ],
        "data": [
            "__init__.py",
            "market_feeder.py",
            "realtime_streamer.py",
            "currency_handler.py",
            "supply_chain_scraper.py",
            "database.py"
        ],
        "optimization": [
            "__init__.py",
            "genetic_optimizer.py",
            "black_litterman.py",
            "factor_model.py"
        ],
        "execution": [
            "__init__.py",
            "alpaca_executor.py"
        ],
        "compute": [
            "__init__.py",
            "dask_cluster.py",
            "ray_manager.py"
        ],
        "ui": [
            "__init__.py",
            "dashboard.py",
            "report_generator.py"
        ],
        "utils": [
            "__init__.py",
            "logger.py",
            "config_loader.py",
            "helpers.py"
        ],
        "monitoring": [
            "__init__.py",
            "health_checker.py",
            "alert_system.py"
        ],
        "tests": [
            "__init__.py",
            "test_core.py",
            "test_ml.py"
        ],
        "scripts": [
            "deploy.sh",
            "migrate_db.py"
        ],
        "models": []  # –ü—É—Å—Ç–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –º–æ–¥–µ–ª–µ–π
    }

    # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    base_dir.mkdir(exist_ok=True)
    print(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {base_dir}")

    # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ —Ñ–∞–π–ª—ã
    for file in root_files:
        file_path = base_dir / file
        file_path.touch()
        print(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {file_path}")

    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Ñ–∞–π–ª—ã
    for folder, files in structure.items():
        folder_path = base_dir / folder
        folder_path.mkdir(exist_ok=True)
        print(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder_path}")

        # –°–æ–∑–¥–∞–µ–º __init__.py –¥–ª—è Python –ø–∞–∫–µ—Ç–æ–≤ (–∫—Ä–æ–º–µ scripts)
        if folder not in ["scripts", "models"]:
            init_file = folder_path / "__init__.py"
            init_file.touch()

        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
        for file in files:
            file_path = folder_path / file
            file_path.touch()
            print(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {file_path}")

    print("\n‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
    print("üìÅ –û–±–∑–æ—Ä —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")

    # –í—ã–≤–æ–¥–∏–º –¥–µ—Ä–µ–≤–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    def print_tree(directory, prefix=""):
        contents = list(directory.iterdir())
        pointers = ["‚îú‚îÄ‚îÄ"] * (len(contents) - 1) + ["‚îî‚îÄ‚îÄ"]
        for pointer, path in zip(pointers, contents):
            print(prefix + pointer + " " + path.name)
            if path.is_dir():
                extension = "‚îÇ   " if pointer == "‚îú‚îÄ‚îÄ" else "    "
                print_tree(path, prefix + extension)

    print_tree(base_dir)

if __name__ == "__main__":
    create_project_structure()
